/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CaddScore extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CaddScore\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"transcriptId\",\"type\":[\"null\",\"string\"]},{\"name\":\"cScore\",\"type\":[\"null\",\"float\"]},{\"name\":\"rawScore\",\"type\":[\"null\",\"float\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence transcriptId;
  @Deprecated public java.lang.Float cScore;
  @Deprecated public java.lang.Float rawScore;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public CaddScore() {}

  /**
   * All-args constructor.
   */
  public CaddScore(java.lang.CharSequence transcriptId, java.lang.Float cScore, java.lang.Float rawScore) {
    this.transcriptId = transcriptId;
    this.cScore = cScore;
    this.rawScore = rawScore;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transcriptId;
    case 1: return cScore;
    case 2: return rawScore;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transcriptId = (java.lang.CharSequence)value$; break;
    case 1: cScore = (java.lang.Float)value$; break;
    case 2: rawScore = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'transcriptId' field.
   */
  public java.lang.CharSequence getTranscriptId() {
    return transcriptId;
  }

  /**
   * Sets the value of the 'transcriptId' field.
   * @param value the value to set.
   */
  public void setTranscriptId(java.lang.CharSequence value) {
    this.transcriptId = value;
  }

  /**
   * Gets the value of the 'cScore' field.
   */
  public java.lang.Float getCScore() {
    return cScore;
  }

  /**
   * Sets the value of the 'cScore' field.
   * @param value the value to set.
   */
  public void setCScore(java.lang.Float value) {
    this.cScore = value;
  }

  /**
   * Gets the value of the 'rawScore' field.
   */
  public java.lang.Float getRawScore() {
    return rawScore;
  }

  /**
   * Sets the value of the 'rawScore' field.
   * @param value the value to set.
   */
  public void setRawScore(java.lang.Float value) {
    this.rawScore = value;
  }

  /** Creates a new CaddScore RecordBuilder */
  public static org.opencb.biodata.models.variant.avro.CaddScore.Builder newBuilder() {
    return new org.opencb.biodata.models.variant.avro.CaddScore.Builder();
  }
  
  /** Creates a new CaddScore RecordBuilder by copying an existing Builder */
  public static org.opencb.biodata.models.variant.avro.CaddScore.Builder newBuilder(org.opencb.biodata.models.variant.avro.CaddScore.Builder other) {
    return new org.opencb.biodata.models.variant.avro.CaddScore.Builder(other);
  }
  
  /** Creates a new CaddScore RecordBuilder by copying an existing CaddScore instance */
  public static org.opencb.biodata.models.variant.avro.CaddScore.Builder newBuilder(org.opencb.biodata.models.variant.avro.CaddScore other) {
    return new org.opencb.biodata.models.variant.avro.CaddScore.Builder(other);
  }
  
  /**
   * RecordBuilder for CaddScore instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CaddScore>
    implements org.apache.avro.data.RecordBuilder<CaddScore> {

    private java.lang.CharSequence transcriptId;
    private java.lang.Float cScore;
    private java.lang.Float rawScore;

    /** Creates a new Builder */
    private Builder() {
      super(org.opencb.biodata.models.variant.avro.CaddScore.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.opencb.biodata.models.variant.avro.CaddScore.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transcriptId)) {
        this.transcriptId = data().deepCopy(fields()[0].schema(), other.transcriptId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cScore)) {
        this.cScore = data().deepCopy(fields()[1].schema(), other.cScore);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rawScore)) {
        this.rawScore = data().deepCopy(fields()[2].schema(), other.rawScore);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CaddScore instance */
    private Builder(org.opencb.biodata.models.variant.avro.CaddScore other) {
            super(org.opencb.biodata.models.variant.avro.CaddScore.SCHEMA$);
      if (isValidValue(fields()[0], other.transcriptId)) {
        this.transcriptId = data().deepCopy(fields()[0].schema(), other.transcriptId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cScore)) {
        this.cScore = data().deepCopy(fields()[1].schema(), other.cScore);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rawScore)) {
        this.rawScore = data().deepCopy(fields()[2].schema(), other.rawScore);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'transcriptId' field */
    public java.lang.CharSequence getTranscriptId() {
      return transcriptId;
    }
    
    /** Sets the value of the 'transcriptId' field */
    public org.opencb.biodata.models.variant.avro.CaddScore.Builder setTranscriptId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.transcriptId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'transcriptId' field has been set */
    public boolean hasTranscriptId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'transcriptId' field */
    public org.opencb.biodata.models.variant.avro.CaddScore.Builder clearTranscriptId() {
      transcriptId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'cScore' field */
    public java.lang.Float getCScore() {
      return cScore;
    }
    
    /** Sets the value of the 'cScore' field */
    public org.opencb.biodata.models.variant.avro.CaddScore.Builder setCScore(java.lang.Float value) {
      validate(fields()[1], value);
      this.cScore = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'cScore' field has been set */
    public boolean hasCScore() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'cScore' field */
    public org.opencb.biodata.models.variant.avro.CaddScore.Builder clearCScore() {
      cScore = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'rawScore' field */
    public java.lang.Float getRawScore() {
      return rawScore;
    }
    
    /** Sets the value of the 'rawScore' field */
    public org.opencb.biodata.models.variant.avro.CaddScore.Builder setRawScore(java.lang.Float value) {
      validate(fields()[2], value);
      this.rawScore = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'rawScore' field has been set */
    public boolean hasRawScore() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'rawScore' field */
    public org.opencb.biodata.models.variant.avro.CaddScore.Builder clearRawScore() {
      rawScore = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public CaddScore build() {
      try {
        CaddScore record = new CaddScore();
        record.transcriptId = fieldSetFlags()[0] ? this.transcriptId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.cScore = fieldSetFlags()[1] ? this.cScore : (java.lang.Float) defaultValue(fields()[1]);
        record.rawScore = fieldSetFlags()[2] ? this.rawScore : (java.lang.Float) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
