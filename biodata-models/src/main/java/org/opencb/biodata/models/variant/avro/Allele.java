/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Allele extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Allele\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"chromosome\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"position\",\"type\":[\"null\",\"int\"]},{\"name\":\"reference\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"alternate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String chromosome;
   private java.lang.Integer position;
   private java.lang.String reference;
   private java.lang.String alternate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Allele() {}

  /**
   * All-args constructor.
   */
  public Allele(java.lang.String chromosome, java.lang.Integer position, java.lang.String reference, java.lang.String alternate) {
    this.chromosome = chromosome;
    this.position = position;
    this.reference = reference;
    this.alternate = alternate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return chromosome;
    case 1: return position;
    case 2: return reference;
    case 3: return alternate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: chromosome = (java.lang.String)value$; break;
    case 1: position = (java.lang.Integer)value$; break;
    case 2: reference = (java.lang.String)value$; break;
    case 3: alternate = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'chromosome' field.
   */
  public java.lang.String getChromosome() {
    return chromosome;
  }

  /**
   * Sets the value of the 'chromosome' field.
   * @param value the value to set.
   */
  public void setChromosome(java.lang.String value) {
    this.chromosome = value;
  }

  /**
   * Gets the value of the 'position' field.
   */
  public java.lang.Integer getPosition() {
    return position;
  }

  /**
   * Sets the value of the 'position' field.
   * @param value the value to set.
   */
  public void setPosition(java.lang.Integer value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'reference' field.
   */
  public java.lang.String getReference() {
    return reference;
  }

  /**
   * Sets the value of the 'reference' field.
   * @param value the value to set.
   */
  public void setReference(java.lang.String value) {
    this.reference = value;
  }

  /**
   * Gets the value of the 'alternate' field.
   */
  public java.lang.String getAlternate() {
    return alternate;
  }

  /**
   * Sets the value of the 'alternate' field.
   * @param value the value to set.
   */
  public void setAlternate(java.lang.String value) {
    this.alternate = value;
  }

  /** Creates a new Allele RecordBuilder */
  public static org.opencb.biodata.models.variant.avro.Allele.Builder newBuilder() {
    return new org.opencb.biodata.models.variant.avro.Allele.Builder();
  }
  
  /** Creates a new Allele RecordBuilder by copying an existing Builder */
  public static org.opencb.biodata.models.variant.avro.Allele.Builder newBuilder(org.opencb.biodata.models.variant.avro.Allele.Builder other) {
    return new org.opencb.biodata.models.variant.avro.Allele.Builder(other);
  }
  
  /** Creates a new Allele RecordBuilder by copying an existing Allele instance */
  public static org.opencb.biodata.models.variant.avro.Allele.Builder newBuilder(org.opencb.biodata.models.variant.avro.Allele other) {
    return new org.opencb.biodata.models.variant.avro.Allele.Builder(other);
  }
  
  /**
   * RecordBuilder for Allele instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Allele>
    implements org.apache.avro.data.RecordBuilder<Allele> {

    private java.lang.String chromosome;
    private java.lang.Integer position;
    private java.lang.String reference;
    private java.lang.String alternate;

    /** Creates a new Builder */
    private Builder() {
      super(org.opencb.biodata.models.variant.avro.Allele.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.opencb.biodata.models.variant.avro.Allele.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.chromosome)) {
        this.chromosome = data().deepCopy(fields()[0].schema(), other.chromosome);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.reference)) {
        this.reference = data().deepCopy(fields()[2].schema(), other.reference);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.alternate)) {
        this.alternate = data().deepCopy(fields()[3].schema(), other.alternate);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Allele instance */
    private Builder(org.opencb.biodata.models.variant.avro.Allele other) {
            super(org.opencb.biodata.models.variant.avro.Allele.SCHEMA$);
      if (isValidValue(fields()[0], other.chromosome)) {
        this.chromosome = data().deepCopy(fields()[0].schema(), other.chromosome);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.reference)) {
        this.reference = data().deepCopy(fields()[2].schema(), other.reference);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.alternate)) {
        this.alternate = data().deepCopy(fields()[3].schema(), other.alternate);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'chromosome' field */
    public java.lang.String getChromosome() {
      return chromosome;
    }
    
    /** Sets the value of the 'chromosome' field */
    public org.opencb.biodata.models.variant.avro.Allele.Builder setChromosome(java.lang.String value) {
      validate(fields()[0], value);
      this.chromosome = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'chromosome' field has been set */
    public boolean hasChromosome() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'chromosome' field */
    public org.opencb.biodata.models.variant.avro.Allele.Builder clearChromosome() {
      chromosome = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'position' field */
    public java.lang.Integer getPosition() {
      return position;
    }
    
    /** Sets the value of the 'position' field */
    public org.opencb.biodata.models.variant.avro.Allele.Builder setPosition(java.lang.Integer value) {
      validate(fields()[1], value);
      this.position = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'position' field has been set */
    public boolean hasPosition() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'position' field */
    public org.opencb.biodata.models.variant.avro.Allele.Builder clearPosition() {
      position = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'reference' field */
    public java.lang.String getReference() {
      return reference;
    }
    
    /** Sets the value of the 'reference' field */
    public org.opencb.biodata.models.variant.avro.Allele.Builder setReference(java.lang.String value) {
      validate(fields()[2], value);
      this.reference = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'reference' field has been set */
    public boolean hasReference() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'reference' field */
    public org.opencb.biodata.models.variant.avro.Allele.Builder clearReference() {
      reference = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'alternate' field */
    public java.lang.String getAlternate() {
      return alternate;
    }
    
    /** Sets the value of the 'alternate' field */
    public org.opencb.biodata.models.variant.avro.Allele.Builder setAlternate(java.lang.String value) {
      validate(fields()[3], value);
      this.alternate = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'alternate' field has been set */
    public boolean hasAlternate() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'alternate' field */
    public org.opencb.biodata.models.variant.avro.Allele.Builder clearAlternate() {
      alternate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Allele build() {
      try {
        Allele record = new Allele();
        record.chromosome = fieldSetFlags()[0] ? this.chromosome : (java.lang.String) defaultValue(fields()[0]);
        record.position = fieldSetFlags()[1] ? this.position : (java.lang.Integer) defaultValue(fields()[1]);
        record.reference = fieldSetFlags()[2] ? this.reference : (java.lang.String) defaultValue(fields()[2]);
        record.alternate = fieldSetFlags()[3] ? this.alternate : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
