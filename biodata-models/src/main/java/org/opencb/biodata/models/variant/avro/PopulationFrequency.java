/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PopulationFrequency extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PopulationFrequency\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"study\",\"type\":[\"null\",\"string\"]},{\"name\":\"pop\",\"type\":[\"null\",\"string\"]},{\"name\":\"superPop\",\"type\":[\"null\",\"string\"]},{\"name\":\"refAllele\",\"type\":[\"null\",\"string\"]},{\"name\":\"altAllele\",\"type\":[\"null\",\"string\"]},{\"name\":\"refAlleleFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"altAlleleFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"refHomGenotypeFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"hetGenotypeFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"altHomGenotypeFreq\",\"type\":[\"null\",\"float\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence study;
  @Deprecated public CharSequence pop;
  @Deprecated public CharSequence superPop;
  @Deprecated public CharSequence refAllele;
  @Deprecated public CharSequence altAllele;
  @Deprecated public Float refAlleleFreq;
  @Deprecated public Float altAlleleFreq;
  @Deprecated public Float refHomGenotypeFreq;
  @Deprecated public Float hetGenotypeFreq;
  @Deprecated public Float altHomGenotypeFreq;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PopulationFrequency() {}

  /**
   * All-args constructor.
   */
  public PopulationFrequency(CharSequence study, CharSequence pop, CharSequence superPop, CharSequence refAllele, CharSequence altAllele, Float refAlleleFreq, Float altAlleleFreq, Float refHomGenotypeFreq, Float hetGenotypeFreq, Float altHomGenotypeFreq) {
    this.study = study;
    this.pop = pop;
    this.superPop = superPop;
    this.refAllele = refAllele;
    this.altAllele = altAllele;
    this.refAlleleFreq = refAlleleFreq;
    this.altAlleleFreq = altAlleleFreq;
    this.refHomGenotypeFreq = refHomGenotypeFreq;
    this.hetGenotypeFreq = hetGenotypeFreq;
    this.altHomGenotypeFreq = altHomGenotypeFreq;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return study;
    case 1: return pop;
    case 2: return superPop;
    case 3: return refAllele;
    case 4: return altAllele;
    case 5: return refAlleleFreq;
    case 6: return altAlleleFreq;
    case 7: return refHomGenotypeFreq;
    case 8: return hetGenotypeFreq;
    case 9: return altHomGenotypeFreq;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: study = (CharSequence)value$; break;
    case 1: pop = (CharSequence)value$; break;
    case 2: superPop = (CharSequence)value$; break;
    case 3: refAllele = (CharSequence)value$; break;
    case 4: altAllele = (CharSequence)value$; break;
    case 5: refAlleleFreq = (Float)value$; break;
    case 6: altAlleleFreq = (Float)value$; break;
    case 7: refHomGenotypeFreq = (Float)value$; break;
    case 8: hetGenotypeFreq = (Float)value$; break;
    case 9: altHomGenotypeFreq = (Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'study' field.
   */
  public CharSequence getStudy() {
    return study;
  }

  /**
   * Sets the value of the 'study' field.
   * @param value the value to set.
   */
  public void setStudy(CharSequence value) {
    this.study = value;
  }

  /**
   * Gets the value of the 'pop' field.
   */
  public CharSequence getPop() {
    return pop;
  }

  /**
   * Sets the value of the 'pop' field.
   * @param value the value to set.
   */
  public void setPop(CharSequence value) {
    this.pop = value;
  }

  /**
   * Gets the value of the 'superPop' field.
   */
  public CharSequence getSuperPop() {
    return superPop;
  }

  /**
   * Sets the value of the 'superPop' field.
   * @param value the value to set.
   */
  public void setSuperPop(CharSequence value) {
    this.superPop = value;
  }

  /**
   * Gets the value of the 'refAllele' field.
   */
  public CharSequence getRefAllele() {
    return refAllele;
  }

  /**
   * Sets the value of the 'refAllele' field.
   * @param value the value to set.
   */
  public void setRefAllele(CharSequence value) {
    this.refAllele = value;
  }

  /**
   * Gets the value of the 'altAllele' field.
   */
  public CharSequence getAltAllele() {
    return altAllele;
  }

  /**
   * Sets the value of the 'altAllele' field.
   * @param value the value to set.
   */
  public void setAltAllele(CharSequence value) {
    this.altAllele = value;
  }

  /**
   * Gets the value of the 'refAlleleFreq' field.
   */
  public Float getRefAlleleFreq() {
    return refAlleleFreq;
  }

  /**
   * Sets the value of the 'refAlleleFreq' field.
   * @param value the value to set.
   */
  public void setRefAlleleFreq(Float value) {
    this.refAlleleFreq = value;
  }

  /**
   * Gets the value of the 'altAlleleFreq' field.
   */
  public Float getAltAlleleFreq() {
    return altAlleleFreq;
  }

  /**
   * Sets the value of the 'altAlleleFreq' field.
   * @param value the value to set.
   */
  public void setAltAlleleFreq(Float value) {
    this.altAlleleFreq = value;
  }

  /**
   * Gets the value of the 'refHomGenotypeFreq' field.
   */
  public Float getRefHomGenotypeFreq() {
    return refHomGenotypeFreq;
  }

  /**
   * Sets the value of the 'refHomGenotypeFreq' field.
   * @param value the value to set.
   */
  public void setRefHomGenotypeFreq(Float value) {
    this.refHomGenotypeFreq = value;
  }

  /**
   * Gets the value of the 'hetGenotypeFreq' field.
   */
  public Float getHetGenotypeFreq() {
    return hetGenotypeFreq;
  }

  /**
   * Sets the value of the 'hetGenotypeFreq' field.
   * @param value the value to set.
   */
  public void setHetGenotypeFreq(Float value) {
    this.hetGenotypeFreq = value;
  }

  /**
   * Gets the value of the 'altHomGenotypeFreq' field.
   */
  public Float getAltHomGenotypeFreq() {
    return altHomGenotypeFreq;
  }

  /**
   * Sets the value of the 'altHomGenotypeFreq' field.
   * @param value the value to set.
   */
  public void setAltHomGenotypeFreq(Float value) {
    this.altHomGenotypeFreq = value;
  }

  /** Creates a new PopulationFrequency RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new PopulationFrequency RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new PopulationFrequency RecordBuilder by copying an existing PopulationFrequency instance */
  public static Builder newBuilder(PopulationFrequency other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for PopulationFrequency instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PopulationFrequency>
    implements org.apache.avro.data.RecordBuilder<PopulationFrequency> {

    private CharSequence study;
    private CharSequence pop;
    private CharSequence superPop;
    private CharSequence refAllele;
    private CharSequence altAllele;
    private Float refAlleleFreq;
    private Float altAlleleFreq;
    private Float refHomGenotypeFreq;
    private Float hetGenotypeFreq;
    private Float altHomGenotypeFreq;

    /** Creates a new Builder */
    private Builder() {
      super(PopulationFrequency.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.study)) {
        this.study = data().deepCopy(fields()[0].schema(), other.study);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pop)) {
        this.pop = data().deepCopy(fields()[1].schema(), other.pop);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.superPop)) {
        this.superPop = data().deepCopy(fields()[2].schema(), other.superPop);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.refAllele)) {
        this.refAllele = data().deepCopy(fields()[3].schema(), other.refAllele);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.altAllele)) {
        this.altAllele = data().deepCopy(fields()[4].schema(), other.altAllele);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.refAlleleFreq)) {
        this.refAlleleFreq = data().deepCopy(fields()[5].schema(), other.refAlleleFreq);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.altAlleleFreq)) {
        this.altAlleleFreq = data().deepCopy(fields()[6].schema(), other.altAlleleFreq);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.refHomGenotypeFreq)) {
        this.refHomGenotypeFreq = data().deepCopy(fields()[7].schema(), other.refHomGenotypeFreq);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.hetGenotypeFreq)) {
        this.hetGenotypeFreq = data().deepCopy(fields()[8].schema(), other.hetGenotypeFreq);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.altHomGenotypeFreq)) {
        this.altHomGenotypeFreq = data().deepCopy(fields()[9].schema(), other.altHomGenotypeFreq);
        fieldSetFlags()[9] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PopulationFrequency instance */
    private Builder(PopulationFrequency other) {
            super(PopulationFrequency.SCHEMA$);
      if (isValidValue(fields()[0], other.study)) {
        this.study = data().deepCopy(fields()[0].schema(), other.study);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pop)) {
        this.pop = data().deepCopy(fields()[1].schema(), other.pop);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.superPop)) {
        this.superPop = data().deepCopy(fields()[2].schema(), other.superPop);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.refAllele)) {
        this.refAllele = data().deepCopy(fields()[3].schema(), other.refAllele);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.altAllele)) {
        this.altAllele = data().deepCopy(fields()[4].schema(), other.altAllele);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.refAlleleFreq)) {
        this.refAlleleFreq = data().deepCopy(fields()[5].schema(), other.refAlleleFreq);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.altAlleleFreq)) {
        this.altAlleleFreq = data().deepCopy(fields()[6].schema(), other.altAlleleFreq);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.refHomGenotypeFreq)) {
        this.refHomGenotypeFreq = data().deepCopy(fields()[7].schema(), other.refHomGenotypeFreq);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.hetGenotypeFreq)) {
        this.hetGenotypeFreq = data().deepCopy(fields()[8].schema(), other.hetGenotypeFreq);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.altHomGenotypeFreq)) {
        this.altHomGenotypeFreq = data().deepCopy(fields()[9].schema(), other.altHomGenotypeFreq);
        fieldSetFlags()[9] = true;
      }
    }

    /** Gets the value of the 'study' field */
    public CharSequence getStudy() {
      return study;
    }
    
    /** Sets the value of the 'study' field */
    public Builder setStudy(CharSequence value) {
      validate(fields()[0], value);
      this.study = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'study' field has been set */
    public boolean hasStudy() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'study' field */
    public Builder clearStudy() {
      study = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'pop' field */
    public CharSequence getPop() {
      return pop;
    }
    
    /** Sets the value of the 'pop' field */
    public Builder setPop(CharSequence value) {
      validate(fields()[1], value);
      this.pop = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'pop' field has been set */
    public boolean hasPop() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'pop' field */
    public Builder clearPop() {
      pop = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'superPop' field */
    public CharSequence getSuperPop() {
      return superPop;
    }
    
    /** Sets the value of the 'superPop' field */
    public Builder setSuperPop(CharSequence value) {
      validate(fields()[2], value);
      this.superPop = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'superPop' field has been set */
    public boolean hasSuperPop() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'superPop' field */
    public Builder clearSuperPop() {
      superPop = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'refAllele' field */
    public CharSequence getRefAllele() {
      return refAllele;
    }
    
    /** Sets the value of the 'refAllele' field */
    public Builder setRefAllele(CharSequence value) {
      validate(fields()[3], value);
      this.refAllele = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'refAllele' field has been set */
    public boolean hasRefAllele() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'refAllele' field */
    public Builder clearRefAllele() {
      refAllele = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'altAllele' field */
    public CharSequence getAltAllele() {
      return altAllele;
    }
    
    /** Sets the value of the 'altAllele' field */
    public Builder setAltAllele(CharSequence value) {
      validate(fields()[4], value);
      this.altAllele = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'altAllele' field has been set */
    public boolean hasAltAllele() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'altAllele' field */
    public Builder clearAltAllele() {
      altAllele = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'refAlleleFreq' field */
    public Float getRefAlleleFreq() {
      return refAlleleFreq;
    }
    
    /** Sets the value of the 'refAlleleFreq' field */
    public Builder setRefAlleleFreq(Float value) {
      validate(fields()[5], value);
      this.refAlleleFreq = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'refAlleleFreq' field has been set */
    public boolean hasRefAlleleFreq() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'refAlleleFreq' field */
    public Builder clearRefAlleleFreq() {
      refAlleleFreq = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'altAlleleFreq' field */
    public Float getAltAlleleFreq() {
      return altAlleleFreq;
    }
    
    /** Sets the value of the 'altAlleleFreq' field */
    public Builder setAltAlleleFreq(Float value) {
      validate(fields()[6], value);
      this.altAlleleFreq = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'altAlleleFreq' field has been set */
    public boolean hasAltAlleleFreq() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'altAlleleFreq' field */
    public Builder clearAltAlleleFreq() {
      altAlleleFreq = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'refHomGenotypeFreq' field */
    public Float getRefHomGenotypeFreq() {
      return refHomGenotypeFreq;
    }
    
    /** Sets the value of the 'refHomGenotypeFreq' field */
    public Builder setRefHomGenotypeFreq(Float value) {
      validate(fields()[7], value);
      this.refHomGenotypeFreq = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'refHomGenotypeFreq' field has been set */
    public boolean hasRefHomGenotypeFreq() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'refHomGenotypeFreq' field */
    public Builder clearRefHomGenotypeFreq() {
      refHomGenotypeFreq = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'hetGenotypeFreq' field */
    public Float getHetGenotypeFreq() {
      return hetGenotypeFreq;
    }
    
    /** Sets the value of the 'hetGenotypeFreq' field */
    public Builder setHetGenotypeFreq(Float value) {
      validate(fields()[8], value);
      this.hetGenotypeFreq = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'hetGenotypeFreq' field has been set */
    public boolean hasHetGenotypeFreq() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'hetGenotypeFreq' field */
    public Builder clearHetGenotypeFreq() {
      hetGenotypeFreq = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'altHomGenotypeFreq' field */
    public Float getAltHomGenotypeFreq() {
      return altHomGenotypeFreq;
    }
    
    /** Sets the value of the 'altHomGenotypeFreq' field */
    public Builder setAltHomGenotypeFreq(Float value) {
      validate(fields()[9], value);
      this.altHomGenotypeFreq = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'altHomGenotypeFreq' field has been set */
    public boolean hasAltHomGenotypeFreq() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'altHomGenotypeFreq' field */
    public Builder clearAltHomGenotypeFreq() {
      altHomGenotypeFreq = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public PopulationFrequency build() {
      try {
        PopulationFrequency record = new PopulationFrequency();
        record.study = fieldSetFlags()[0] ? this.study : (CharSequence) defaultValue(fields()[0]);
        record.pop = fieldSetFlags()[1] ? this.pop : (CharSequence) defaultValue(fields()[1]);
        record.superPop = fieldSetFlags()[2] ? this.superPop : (CharSequence) defaultValue(fields()[2]);
        record.refAllele = fieldSetFlags()[3] ? this.refAllele : (CharSequence) defaultValue(fields()[3]);
        record.altAllele = fieldSetFlags()[4] ? this.altAllele : (CharSequence) defaultValue(fields()[4]);
        record.refAlleleFreq = fieldSetFlags()[5] ? this.refAlleleFreq : (Float) defaultValue(fields()[5]);
        record.altAlleleFreq = fieldSetFlags()[6] ? this.altAlleleFreq : (Float) defaultValue(fields()[6]);
        record.refHomGenotypeFreq = fieldSetFlags()[7] ? this.refHomGenotypeFreq : (Float) defaultValue(fields()[7]);
        record.hetGenotypeFreq = fieldSetFlags()[8] ? this.hetGenotypeFreq : (Float) defaultValue(fields()[8]);
        record.altHomGenotypeFreq = fieldSetFlags()[9] ? this.altHomGenotypeFreq : (Float) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
