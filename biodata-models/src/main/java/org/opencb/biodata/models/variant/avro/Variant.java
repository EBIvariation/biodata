/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Variant extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Variant\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"variantType\",\"type\":{\"type\":\"enum\",\"name\":\"VariantType\",\"symbols\":[\"SNP\",\"SNV\",\"MNP\",\"MNV\",\"INDEL\",\"SV\",\"CNV\"]}},{\"name\":\"SV_THRESHOLD\",\"type\":\"int\",\"default\":50},{\"name\":\"chromosome\",\"type\":\"string\"},{\"name\":\"start\",\"type\":\"int\"},{\"name\":\"end\",\"type\":\"int\"},{\"name\":\"length\",\"type\":\"int\"},{\"name\":\"reference\",\"type\":\"string\"},{\"name\":\"alternate\",\"type\":\"string\"},{\"name\":\"sourceEntries\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"VariantSourceEntry\",\"fields\":[{\"name\":\"fileId\",\"type\":[\"null\",\"string\"]},{\"name\":\"studyId\",\"type\":[\"null\",\"string\"]},{\"name\":\"secondaryAlternates\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null},{\"name\":\"format\",\"type\":\"string\"},{\"name\":\"samplesData\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"map\",\"values\":\"string\"}}},{\"name\":\"cohortStats\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"VariantStats\",\"fields\":[{\"name\":\"refAllele\",\"type\":[\"null\",\"string\"]},{\"name\":\"altAllele\",\"type\":[\"null\",\"string\"]},{\"name\":\"refAlleleCount\",\"type\":[\"null\",\"int\"]},{\"name\":\"altAlleleCount\",\"type\":[\"null\",\"int\"]},{\"name\":\"missingAlleles\",\"type\":[\"null\",\"int\"]},{\"name\":\"missingGenotypes\",\"type\":[\"null\",\"int\"]},{\"name\":\"refAlleleFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"altAlleleFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"maf\",\"type\":[\"null\",\"float\"]},{\"name\":\"mgf\",\"type\":[\"null\",\"float\"]},{\"name\":\"mafAllele\",\"type\":[\"null\",\"string\"]},{\"name\":\"mgfGenotype\",\"type\":[\"null\",\"string\"]},{\"name\":\"passedFilters\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"mendelianErrors\",\"type\":[\"null\",\"int\"]},{\"name\":\"casesPercentDominant\",\"type\":[\"null\",\"float\"]},{\"name\":\"controlsPercentDominant\",\"type\":[\"null\",\"float\"]},{\"name\":\"casesPercentRecessive\",\"type\":[\"null\",\"float\"]},{\"name\":\"controlsPercentRecessive\",\"type\":[\"null\",\"float\"]},{\"name\":\"quality\",\"type\":[\"null\",\"float\"]},{\"name\":\"numSamples\",\"type\":[\"null\",\"int\"]},{\"name\":\"variantType\",\"type\":\"VariantType\"},{\"name\":\"hw\",\"type\":{\"type\":\"record\",\"name\":\"VariantHardyWeinbergStats\",\"fields\":[{\"name\":\"chi2\",\"type\":[\"null\",\"float\"]},{\"name\":\"pValue\",\"type\":[\"null\",\"float\"]},{\"name\":\"n\",\"type\":[\"null\",\"int\"]},{\"name\":\"n_AA_11\",\"type\":[\"null\",\"int\"]},{\"name\":\"n_Aa_10\",\"type\":[\"null\",\"int\"]},{\"name\":\"n_aa_00\",\"type\":[\"null\",\"int\"]},{\"name\":\"e_AA_11\",\"type\":[\"null\",\"float\"]},{\"name\":\"e_Aa_10\",\"type\":[\"null\",\"float\"]},{\"name\":\"e_aa_00\",\"type\":[\"null\",\"float\"]},{\"name\":\"p\",\"type\":[\"null\",\"float\"]},{\"name\":\"q\",\"type\":[\"null\",\"float\"]}]}}]}}},{\"name\":\"DEFAULT_COHORT\",\"type\":\"string\",\"default\":\"all\"},{\"name\":\"attributes\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}}},{\"name\":\"annotation\",\"type\":\"string\"},{\"name\":\"Ids\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]},{\"name\":\"hgvs\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":\"string\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public org.opencb.biodata.models.variant.avro.VariantType variantType;
  @Deprecated public int SV_THRESHOLD;
  @Deprecated public CharSequence chromosome;
  @Deprecated public int start;
  @Deprecated public int end;
  @Deprecated public int length;
  @Deprecated public CharSequence reference;
  @Deprecated public CharSequence alternate;
  @Deprecated public java.util.Map<CharSequence,org.opencb.biodata.models.variant.avro.VariantSourceEntry> sourceEntries;
  @Deprecated public CharSequence annotation;
  @Deprecated public java.util.List<CharSequence> Ids;
  @Deprecated public java.util.Map<CharSequence,java.util.List<CharSequence>> hgvs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Variant() {}

  /**
   * All-args constructor.
   */
  public Variant(org.opencb.biodata.models.variant.avro.VariantType variantType, Integer SV_THRESHOLD, CharSequence chromosome, Integer start, Integer end, Integer length, CharSequence reference, CharSequence alternate, java.util.Map<CharSequence,org.opencb.biodata.models.variant.avro.VariantSourceEntry> sourceEntries, CharSequence annotation, java.util.List<CharSequence> Ids, java.util.Map<CharSequence,java.util.List<CharSequence>> hgvs) {
    this.variantType = variantType;
    this.SV_THRESHOLD = SV_THRESHOLD;
    this.chromosome = chromosome;
    this.start = start;
    this.end = end;
    this.length = length;
    this.reference = reference;
    this.alternate = alternate;
    this.sourceEntries = sourceEntries;
    this.annotation = annotation;
    this.Ids = Ids;
    this.hgvs = hgvs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return variantType;
    case 1: return SV_THRESHOLD;
    case 2: return chromosome;
    case 3: return start;
    case 4: return end;
    case 5: return length;
    case 6: return reference;
    case 7: return alternate;
    case 8: return sourceEntries;
    case 9: return annotation;
    case 10: return Ids;
    case 11: return hgvs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: variantType = (org.opencb.biodata.models.variant.avro.VariantType)value$; break;
    case 1: SV_THRESHOLD = (Integer)value$; break;
    case 2: chromosome = (CharSequence)value$; break;
    case 3: start = (Integer)value$; break;
    case 4: end = (Integer)value$; break;
    case 5: length = (Integer)value$; break;
    case 6: reference = (CharSequence)value$; break;
    case 7: alternate = (CharSequence)value$; break;
    case 8: sourceEntries = (java.util.Map<CharSequence,org.opencb.biodata.models.variant.avro.VariantSourceEntry>)value$; break;
    case 9: annotation = (CharSequence)value$; break;
    case 10: Ids = (java.util.List<CharSequence>)value$; break;
    case 11: hgvs = (java.util.Map<CharSequence,java.util.List<CharSequence>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'variantType' field.
   */
  public org.opencb.biodata.models.variant.avro.VariantType getVariantType() {
    return variantType;
  }

  /**
   * Sets the value of the 'variantType' field.
   * @param value the value to set.
   */
  public void setVariantType(org.opencb.biodata.models.variant.avro.VariantType value) {
    this.variantType = value;
  }

  /**
   * Gets the value of the 'SV_THRESHOLD' field.
   */
  public Integer getSVTHRESHOLD() {
    return SV_THRESHOLD;
  }

  /**
   * Sets the value of the 'SV_THRESHOLD' field.
   * @param value the value to set.
   */
  public void setSVTHRESHOLD(Integer value) {
    this.SV_THRESHOLD = value;
  }

  /**
   * Gets the value of the 'chromosome' field.
   */
  public CharSequence getChromosome() {
    return chromosome;
  }

  /**
   * Sets the value of the 'chromosome' field.
   * @param value the value to set.
   */
  public void setChromosome(CharSequence value) {
    this.chromosome = value;
  }

  /**
   * Gets the value of the 'start' field.
   */
  public Integer getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * @param value the value to set.
   */
  public void setStart(Integer value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'end' field.
   */
  public Integer getEnd() {
    return end;
  }

  /**
   * Sets the value of the 'end' field.
   * @param value the value to set.
   */
  public void setEnd(Integer value) {
    this.end = value;
  }

  /**
   * Gets the value of the 'length' field.
   */
  public Integer getLength() {
    return length;
  }

  /**
   * Sets the value of the 'length' field.
   * @param value the value to set.
   */
  public void setLength(Integer value) {
    this.length = value;
  }

  /**
   * Gets the value of the 'reference' field.
   */
  public CharSequence getReference() {
    return reference;
  }

  /**
   * Sets the value of the 'reference' field.
   * @param value the value to set.
   */
  public void setReference(CharSequence value) {
    this.reference = value;
  }

  /**
   * Gets the value of the 'alternate' field.
   */
  public CharSequence getAlternate() {
    return alternate;
  }

  /**
   * Sets the value of the 'alternate' field.
   * @param value the value to set.
   */
  public void setAlternate(CharSequence value) {
    this.alternate = value;
  }

  /**
   * Gets the value of the 'sourceEntries' field.
   */
  public java.util.Map<CharSequence,org.opencb.biodata.models.variant.avro.VariantSourceEntry> getSourceEntries() {
    return sourceEntries;
  }

  /**
   * Sets the value of the 'sourceEntries' field.
   * @param value the value to set.
   */
  public void setSourceEntries(java.util.Map<CharSequence,org.opencb.biodata.models.variant.avro.VariantSourceEntry> value) {
    this.sourceEntries = value;
  }

  /**
   * Gets the value of the 'annotation' field.
   */
  public CharSequence getAnnotation() {
    return annotation;
  }

  /**
   * Sets the value of the 'annotation' field.
   * @param value the value to set.
   */
  public void setAnnotation(CharSequence value) {
    this.annotation = value;
  }

  /**
   * Gets the value of the 'Ids' field.
   */
  public java.util.List<CharSequence> getIds() {
    return Ids;
  }

  /**
   * Sets the value of the 'Ids' field.
   * @param value the value to set.
   */
  public void setIds(java.util.List<CharSequence> value) {
    this.Ids = value;
  }

  /**
   * Gets the value of the 'hgvs' field.
   */
  public java.util.Map<CharSequence,java.util.List<CharSequence>> getHgvs() {
    return hgvs;
  }

  /**
   * Sets the value of the 'hgvs' field.
   * @param value the value to set.
   */
  public void setHgvs(java.util.Map<CharSequence,java.util.List<CharSequence>> value) {
    this.hgvs = value;
  }

  /** Creates a new Variant RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new Variant RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new Variant RecordBuilder by copying an existing Variant instance */
  public static Builder newBuilder(Variant other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for Variant instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Variant>
    implements org.apache.avro.data.RecordBuilder<Variant> {

    private org.opencb.biodata.models.variant.avro.VariantType variantType;
    private int SV_THRESHOLD;
    private CharSequence chromosome;
    private int start;
    private int end;
    private int length;
    private CharSequence reference;
    private CharSequence alternate;
    private java.util.Map<CharSequence,org.opencb.biodata.models.variant.avro.VariantSourceEntry> sourceEntries;
    private CharSequence annotation;
    private java.util.List<CharSequence> Ids;
    private java.util.Map<CharSequence,java.util.List<CharSequence>> hgvs;

    /** Creates a new Builder */
    private Builder() {
      super(Variant.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.variantType)) {
        this.variantType = data().deepCopy(fields()[0].schema(), other.variantType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.SV_THRESHOLD)) {
        this.SV_THRESHOLD = data().deepCopy(fields()[1].schema(), other.SV_THRESHOLD);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chromosome)) {
        this.chromosome = data().deepCopy(fields()[2].schema(), other.chromosome);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.start)) {
        this.start = data().deepCopy(fields()[3].schema(), other.start);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.end)) {
        this.end = data().deepCopy(fields()[4].schema(), other.end);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.length)) {
        this.length = data().deepCopy(fields()[5].schema(), other.length);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.reference)) {
        this.reference = data().deepCopy(fields()[6].schema(), other.reference);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.alternate)) {
        this.alternate = data().deepCopy(fields()[7].schema(), other.alternate);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sourceEntries)) {
        this.sourceEntries = data().deepCopy(fields()[8].schema(), other.sourceEntries);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.annotation)) {
        this.annotation = data().deepCopy(fields()[9].schema(), other.annotation);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.Ids)) {
        this.Ids = data().deepCopy(fields()[10].schema(), other.Ids);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.hgvs)) {
        this.hgvs = data().deepCopy(fields()[11].schema(), other.hgvs);
        fieldSetFlags()[11] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Variant instance */
    private Builder(Variant other) {
            super(Variant.SCHEMA$);
      if (isValidValue(fields()[0], other.variantType)) {
        this.variantType = data().deepCopy(fields()[0].schema(), other.variantType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.SV_THRESHOLD)) {
        this.SV_THRESHOLD = data().deepCopy(fields()[1].schema(), other.SV_THRESHOLD);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chromosome)) {
        this.chromosome = data().deepCopy(fields()[2].schema(), other.chromosome);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.start)) {
        this.start = data().deepCopy(fields()[3].schema(), other.start);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.end)) {
        this.end = data().deepCopy(fields()[4].schema(), other.end);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.length)) {
        this.length = data().deepCopy(fields()[5].schema(), other.length);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.reference)) {
        this.reference = data().deepCopy(fields()[6].schema(), other.reference);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.alternate)) {
        this.alternate = data().deepCopy(fields()[7].schema(), other.alternate);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sourceEntries)) {
        this.sourceEntries = data().deepCopy(fields()[8].schema(), other.sourceEntries);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.annotation)) {
        this.annotation = data().deepCopy(fields()[9].schema(), other.annotation);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.Ids)) {
        this.Ids = data().deepCopy(fields()[10].schema(), other.Ids);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.hgvs)) {
        this.hgvs = data().deepCopy(fields()[11].schema(), other.hgvs);
        fieldSetFlags()[11] = true;
      }
    }

    /** Gets the value of the 'variantType' field */
    public org.opencb.biodata.models.variant.avro.VariantType getVariantType() {
      return variantType;
    }
    
    /** Sets the value of the 'variantType' field */
    public Builder setVariantType(org.opencb.biodata.models.variant.avro.VariantType value) {
      validate(fields()[0], value);
      this.variantType = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'variantType' field has been set */
    public boolean hasVariantType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'variantType' field */
    public Builder clearVariantType() {
      variantType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'SV_THRESHOLD' field */
    public Integer getSVTHRESHOLD() {
      return SV_THRESHOLD;
    }
    
    /** Sets the value of the 'SV_THRESHOLD' field */
    public Builder setSVTHRESHOLD(int value) {
      validate(fields()[1], value);
      this.SV_THRESHOLD = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'SV_THRESHOLD' field has been set */
    public boolean hasSVTHRESHOLD() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'SV_THRESHOLD' field */
    public Builder clearSVTHRESHOLD() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'chromosome' field */
    public CharSequence getChromosome() {
      return chromosome;
    }
    
    /** Sets the value of the 'chromosome' field */
    public Builder setChromosome(CharSequence value) {
      validate(fields()[2], value);
      this.chromosome = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'chromosome' field has been set */
    public boolean hasChromosome() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'chromosome' field */
    public Builder clearChromosome() {
      chromosome = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'start' field */
    public Integer getStart() {
      return start;
    }
    
    /** Sets the value of the 'start' field */
    public Builder setStart(int value) {
      validate(fields()[3], value);
      this.start = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'start' field has been set */
    public boolean hasStart() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'start' field */
    public Builder clearStart() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'end' field */
    public Integer getEnd() {
      return end;
    }
    
    /** Sets the value of the 'end' field */
    public Builder setEnd(int value) {
      validate(fields()[4], value);
      this.end = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'end' field has been set */
    public boolean hasEnd() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'end' field */
    public Builder clearEnd() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'length' field */
    public Integer getLength() {
      return length;
    }
    
    /** Sets the value of the 'length' field */
    public Builder setLength(int value) {
      validate(fields()[5], value);
      this.length = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'length' field has been set */
    public boolean hasLength() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'length' field */
    public Builder clearLength() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'reference' field */
    public CharSequence getReference() {
      return reference;
    }
    
    /** Sets the value of the 'reference' field */
    public Builder setReference(CharSequence value) {
      validate(fields()[6], value);
      this.reference = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'reference' field has been set */
    public boolean hasReference() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'reference' field */
    public Builder clearReference() {
      reference = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'alternate' field */
    public CharSequence getAlternate() {
      return alternate;
    }
    
    /** Sets the value of the 'alternate' field */
    public Builder setAlternate(CharSequence value) {
      validate(fields()[7], value);
      this.alternate = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'alternate' field has been set */
    public boolean hasAlternate() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'alternate' field */
    public Builder clearAlternate() {
      alternate = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'sourceEntries' field */
    public java.util.Map<CharSequence,org.opencb.biodata.models.variant.avro.VariantSourceEntry> getSourceEntries() {
      return sourceEntries;
    }
    
    /** Sets the value of the 'sourceEntries' field */
    public Builder setSourceEntries(java.util.Map<CharSequence,org.opencb.biodata.models.variant.avro.VariantSourceEntry> value) {
      validate(fields()[8], value);
      this.sourceEntries = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'sourceEntries' field has been set */
    public boolean hasSourceEntries() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'sourceEntries' field */
    public Builder clearSourceEntries() {
      sourceEntries = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'annotation' field */
    public CharSequence getAnnotation() {
      return annotation;
    }
    
    /** Sets the value of the 'annotation' field */
    public Builder setAnnotation(CharSequence value) {
      validate(fields()[9], value);
      this.annotation = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'annotation' field has been set */
    public boolean hasAnnotation() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'annotation' field */
    public Builder clearAnnotation() {
      annotation = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'Ids' field */
    public java.util.List<CharSequence> getIds() {
      return Ids;
    }
    
    /** Sets the value of the 'Ids' field */
    public Builder setIds(java.util.List<CharSequence> value) {
      validate(fields()[10], value);
      this.Ids = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'Ids' field has been set */
    public boolean hasIds() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'Ids' field */
    public Builder clearIds() {
      Ids = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'hgvs' field */
    public java.util.Map<CharSequence,java.util.List<CharSequence>> getHgvs() {
      return hgvs;
    }
    
    /** Sets the value of the 'hgvs' field */
    public Builder setHgvs(java.util.Map<CharSequence,java.util.List<CharSequence>> value) {
      validate(fields()[11], value);
      this.hgvs = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'hgvs' field has been set */
    public boolean hasHgvs() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'hgvs' field */
    public Builder clearHgvs() {
      hgvs = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    
    public Variant build() {
      try {
        Variant record = new Variant();
        record.variantType = fieldSetFlags()[0] ? this.variantType : (org.opencb.biodata.models.variant.avro.VariantType) defaultValue(fields()[0]);
        record.SV_THRESHOLD = fieldSetFlags()[1] ? this.SV_THRESHOLD : (Integer) defaultValue(fields()[1]);
        record.chromosome = fieldSetFlags()[2] ? this.chromosome : (CharSequence) defaultValue(fields()[2]);
        record.start = fieldSetFlags()[3] ? this.start : (Integer) defaultValue(fields()[3]);
        record.end = fieldSetFlags()[4] ? this.end : (Integer) defaultValue(fields()[4]);
        record.length = fieldSetFlags()[5] ? this.length : (Integer) defaultValue(fields()[5]);
        record.reference = fieldSetFlags()[6] ? this.reference : (CharSequence) defaultValue(fields()[6]);
        record.alternate = fieldSetFlags()[7] ? this.alternate : (CharSequence) defaultValue(fields()[7]);
        record.sourceEntries = fieldSetFlags()[8] ? this.sourceEntries : (java.util.Map<CharSequence,org.opencb.biodata.models.variant.avro.VariantSourceEntry>) defaultValue(fields()[8]);
        record.annotation = fieldSetFlags()[9] ? this.annotation : (CharSequence) defaultValue(fields()[9]);
        record.Ids = fieldSetFlags()[10] ? this.Ids : (java.util.List<CharSequence>) defaultValue(fields()[10]);
        record.hgvs = fieldSetFlags()[11] ? this.hgvs : (java.util.Map<CharSequence,java.util.List<CharSequence>>) defaultValue(fields()[11]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
