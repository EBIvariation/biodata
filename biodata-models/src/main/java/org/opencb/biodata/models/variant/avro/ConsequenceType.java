/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ConsequenceType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ConsequenceType\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"geneName\",\"type\":[\"null\",\"string\"]},{\"name\":\"ensemblGeneId\",\"type\":[\"null\",\"string\"]},{\"name\":\"ensemblTranscriptId\",\"type\":[\"null\",\"string\"]},{\"name\":\"strand\",\"type\":[\"null\",\"string\"]},{\"name\":\"biotype\",\"type\":[\"null\",\"string\"]},{\"name\":\"cDnaPosition\",\"type\":[\"null\",\"int\"]},{\"name\":\"cdsPosition\",\"type\":[\"null\",\"int\"]},{\"name\":\"aaPosition\",\"type\":[\"null\",\"int\"]},{\"name\":\"aaChange\",\"type\":[\"null\",\"string\"]},{\"name\":\"codon\",\"type\":[\"null\",\"string\"]},{\"name\":\"functionalDescription\",\"type\":[\"null\",\"string\"]},{\"name\":\"proteinSubstitutionScores\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Score\",\"fields\":[{\"name\":\"score\",\"type\":[\"null\",\"double\"]},{\"name\":\"source\",\"type\":[\"null\",\"string\"]},{\"name\":\"description\",\"type\":[\"null\",\"string\"]}]}}]},{\"name\":\"soTerms\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ConsequenceTypeEntry\",\"fields\":[{\"name\":\"soName\",\"type\":[\"null\",\"string\"]},{\"name\":\"soAccession\",\"type\":[\"null\",\"string\"]}]}}]},{\"name\":\"expressionValues\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ExpressionValue\",\"fields\":[{\"name\":\"experimentalFactor\",\"type\":[\"null\",\"string\"]},{\"name\":\"factorValue\",\"type\":[\"null\",\"string\"]},{\"name\":\"experimentId\",\"type\":[\"null\",\"string\"]},{\"name\":\"technologyPlatform\",\"type\":[\"null\",\"string\"]},{\"name\":\"expression\",\"type\":{\"type\":\"enum\",\"name\":\"Expression\",\"symbols\":[\"UP\",\"DOWN\"]}},{\"name\":\"pvalue\",\"type\":[\"null\",\"float\"]}]}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence geneName;
  @Deprecated public CharSequence ensemblGeneId;
  @Deprecated public CharSequence ensemblTranscriptId;
  @Deprecated public CharSequence strand;
  @Deprecated public CharSequence biotype;
  @Deprecated public Integer cDnaPosition;
  @Deprecated public Integer cdsPosition;
  @Deprecated public Integer aaPosition;
  @Deprecated public CharSequence aaChange;
  @Deprecated public CharSequence codon;
  @Deprecated public CharSequence functionalDescription;
  @Deprecated public java.util.List<Score> proteinSubstitutionScores;
  @Deprecated public java.util.List<ConsequenceTypeEntry> soTerms;
  @Deprecated public java.util.List<ExpressionValue> expressionValues;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ConsequenceType() {}

  /**
   * All-args constructor.
   */
  public ConsequenceType(CharSequence geneName, CharSequence ensemblGeneId, CharSequence ensemblTranscriptId, CharSequence strand, CharSequence biotype, Integer cDnaPosition, Integer cdsPosition, Integer aaPosition, CharSequence aaChange, CharSequence codon, CharSequence functionalDescription, java.util.List<Score> proteinSubstitutionScores, java.util.List<ConsequenceTypeEntry> soTerms, java.util.List<ExpressionValue> expressionValues) {
    this.geneName = geneName;
    this.ensemblGeneId = ensemblGeneId;
    this.ensemblTranscriptId = ensemblTranscriptId;
    this.strand = strand;
    this.biotype = biotype;
    this.cDnaPosition = cDnaPosition;
    this.cdsPosition = cdsPosition;
    this.aaPosition = aaPosition;
    this.aaChange = aaChange;
    this.codon = codon;
    this.functionalDescription = functionalDescription;
    this.proteinSubstitutionScores = proteinSubstitutionScores;
    this.soTerms = soTerms;
    this.expressionValues = expressionValues;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return geneName;
    case 1: return ensemblGeneId;
    case 2: return ensemblTranscriptId;
    case 3: return strand;
    case 4: return biotype;
    case 5: return cDnaPosition;
    case 6: return cdsPosition;
    case 7: return aaPosition;
    case 8: return aaChange;
    case 9: return codon;
    case 10: return functionalDescription;
    case 11: return proteinSubstitutionScores;
    case 12: return soTerms;
    case 13: return expressionValues;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: geneName = (CharSequence)value$; break;
    case 1: ensemblGeneId = (CharSequence)value$; break;
    case 2: ensemblTranscriptId = (CharSequence)value$; break;
    case 3: strand = (CharSequence)value$; break;
    case 4: biotype = (CharSequence)value$; break;
    case 5: cDnaPosition = (Integer)value$; break;
    case 6: cdsPosition = (Integer)value$; break;
    case 7: aaPosition = (Integer)value$; break;
    case 8: aaChange = (CharSequence)value$; break;
    case 9: codon = (CharSequence)value$; break;
    case 10: functionalDescription = (CharSequence)value$; break;
    case 11: proteinSubstitutionScores = (java.util.List<Score>)value$; break;
    case 12: soTerms = (java.util.List<ConsequenceTypeEntry>)value$; break;
    case 13: expressionValues = (java.util.List<ExpressionValue>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'geneName' field.
   */
  public CharSequence getGeneName() {
    return geneName;
  }

  /**
   * Sets the value of the 'geneName' field.
   * @param value the value to set.
   */
  public void setGeneName(CharSequence value) {
    this.geneName = value;
  }

  /**
   * Gets the value of the 'ensemblGeneId' field.
   */
  public CharSequence getEnsemblGeneId() {
    return ensemblGeneId;
  }

  /**
   * Sets the value of the 'ensemblGeneId' field.
   * @param value the value to set.
   */
  public void setEnsemblGeneId(CharSequence value) {
    this.ensemblGeneId = value;
  }

  /**
   * Gets the value of the 'ensemblTranscriptId' field.
   */
  public CharSequence getEnsemblTranscriptId() {
    return ensemblTranscriptId;
  }

  /**
   * Sets the value of the 'ensemblTranscriptId' field.
   * @param value the value to set.
   */
  public void setEnsemblTranscriptId(CharSequence value) {
    this.ensemblTranscriptId = value;
  }

  /**
   * Gets the value of the 'strand' field.
   */
  public CharSequence getStrand() {
    return strand;
  }

  /**
   * Sets the value of the 'strand' field.
   * @param value the value to set.
   */
  public void setStrand(CharSequence value) {
    this.strand = value;
  }

  /**
   * Gets the value of the 'biotype' field.
   */
  public CharSequence getBiotype() {
    return biotype;
  }

  /**
   * Sets the value of the 'biotype' field.
   * @param value the value to set.
   */
  public void setBiotype(CharSequence value) {
    this.biotype = value;
  }

  /**
   * Gets the value of the 'cDnaPosition' field.
   */
  public Integer getCDnaPosition() {
    return cDnaPosition;
  }

  /**
   * Sets the value of the 'cDnaPosition' field.
   * @param value the value to set.
   */
  public void setCDnaPosition(Integer value) {
    this.cDnaPosition = value;
  }

  /**
   * Gets the value of the 'cdsPosition' field.
   */
  public Integer getCdsPosition() {
    return cdsPosition;
  }

  /**
   * Sets the value of the 'cdsPosition' field.
   * @param value the value to set.
   */
  public void setCdsPosition(Integer value) {
    this.cdsPosition = value;
  }

  /**
   * Gets the value of the 'aaPosition' field.
   */
  public Integer getAaPosition() {
    return aaPosition;
  }

  /**
   * Sets the value of the 'aaPosition' field.
   * @param value the value to set.
   */
  public void setAaPosition(Integer value) {
    this.aaPosition = value;
  }

  /**
   * Gets the value of the 'aaChange' field.
   */
  public CharSequence getAaChange() {
    return aaChange;
  }

  /**
   * Sets the value of the 'aaChange' field.
   * @param value the value to set.
   */
  public void setAaChange(CharSequence value) {
    this.aaChange = value;
  }

  /**
   * Gets the value of the 'codon' field.
   */
  public CharSequence getCodon() {
    return codon;
  }

  /**
   * Sets the value of the 'codon' field.
   * @param value the value to set.
   */
  public void setCodon(CharSequence value) {
    this.codon = value;
  }

  /**
   * Gets the value of the 'functionalDescription' field.
   */
  public CharSequence getFunctionalDescription() {
    return functionalDescription;
  }

  /**
   * Sets the value of the 'functionalDescription' field.
   * @param value the value to set.
   */
  public void setFunctionalDescription(CharSequence value) {
    this.functionalDescription = value;
  }

  /**
   * Gets the value of the 'proteinSubstitutionScores' field.
   */
  public java.util.List<Score> getProteinSubstitutionScores() {
    return proteinSubstitutionScores;
  }

  /**
   * Sets the value of the 'proteinSubstitutionScores' field.
   * @param value the value to set.
   */
  public void setProteinSubstitutionScores(java.util.List<Score> value) {
    this.proteinSubstitutionScores = value;
  }

  /**
   * Gets the value of the 'soTerms' field.
   */
  public java.util.List<ConsequenceTypeEntry> getSoTerms() {
    return soTerms;
  }

  /**
   * Sets the value of the 'soTerms' field.
   * @param value the value to set.
   */
  public void setSoTerms(java.util.List<ConsequenceTypeEntry> value) {
    this.soTerms = value;
  }

  /**
   * Gets the value of the 'expressionValues' field.
   */
  public java.util.List<ExpressionValue> getExpressionValues() {
    return expressionValues;
  }

  /**
   * Sets the value of the 'expressionValues' field.
   * @param value the value to set.
   */
  public void setExpressionValues(java.util.List<ExpressionValue> value) {
    this.expressionValues = value;
  }

  /** Creates a new ConsequenceType RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new ConsequenceType RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new ConsequenceType RecordBuilder by copying an existing ConsequenceType instance */
  public static Builder newBuilder(ConsequenceType other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for ConsequenceType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ConsequenceType>
    implements org.apache.avro.data.RecordBuilder<ConsequenceType> {

    private CharSequence geneName;
    private CharSequence ensemblGeneId;
    private CharSequence ensemblTranscriptId;
    private CharSequence strand;
    private CharSequence biotype;
    private Integer cDnaPosition;
    private Integer cdsPosition;
    private Integer aaPosition;
    private CharSequence aaChange;
    private CharSequence codon;
    private CharSequence functionalDescription;
    private java.util.List<Score> proteinSubstitutionScores;
    private java.util.List<ConsequenceTypeEntry> soTerms;
    private java.util.List<ExpressionValue> expressionValues;

    /** Creates a new Builder */
    private Builder() {
      super(ConsequenceType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.geneName)) {
        this.geneName = data().deepCopy(fields()[0].schema(), other.geneName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ensemblGeneId)) {
        this.ensemblGeneId = data().deepCopy(fields()[1].schema(), other.ensemblGeneId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ensemblTranscriptId)) {
        this.ensemblTranscriptId = data().deepCopy(fields()[2].schema(), other.ensemblTranscriptId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.strand)) {
        this.strand = data().deepCopy(fields()[3].schema(), other.strand);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.biotype)) {
        this.biotype = data().deepCopy(fields()[4].schema(), other.biotype);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cDnaPosition)) {
        this.cDnaPosition = data().deepCopy(fields()[5].schema(), other.cDnaPosition);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cdsPosition)) {
        this.cdsPosition = data().deepCopy(fields()[6].schema(), other.cdsPosition);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.aaPosition)) {
        this.aaPosition = data().deepCopy(fields()[7].schema(), other.aaPosition);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.aaChange)) {
        this.aaChange = data().deepCopy(fields()[8].schema(), other.aaChange);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.codon)) {
        this.codon = data().deepCopy(fields()[9].schema(), other.codon);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.functionalDescription)) {
        this.functionalDescription = data().deepCopy(fields()[10].schema(), other.functionalDescription);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.proteinSubstitutionScores)) {
        this.proteinSubstitutionScores = data().deepCopy(fields()[11].schema(), other.proteinSubstitutionScores);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.soTerms)) {
        this.soTerms = data().deepCopy(fields()[12].schema(), other.soTerms);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.expressionValues)) {
        this.expressionValues = data().deepCopy(fields()[13].schema(), other.expressionValues);
        fieldSetFlags()[13] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ConsequenceType instance */
    private Builder(ConsequenceType other) {
            super(ConsequenceType.SCHEMA$);
      if (isValidValue(fields()[0], other.geneName)) {
        this.geneName = data().deepCopy(fields()[0].schema(), other.geneName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ensemblGeneId)) {
        this.ensemblGeneId = data().deepCopy(fields()[1].schema(), other.ensemblGeneId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ensemblTranscriptId)) {
        this.ensemblTranscriptId = data().deepCopy(fields()[2].schema(), other.ensemblTranscriptId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.strand)) {
        this.strand = data().deepCopy(fields()[3].schema(), other.strand);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.biotype)) {
        this.biotype = data().deepCopy(fields()[4].schema(), other.biotype);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cDnaPosition)) {
        this.cDnaPosition = data().deepCopy(fields()[5].schema(), other.cDnaPosition);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cdsPosition)) {
        this.cdsPosition = data().deepCopy(fields()[6].schema(), other.cdsPosition);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.aaPosition)) {
        this.aaPosition = data().deepCopy(fields()[7].schema(), other.aaPosition);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.aaChange)) {
        this.aaChange = data().deepCopy(fields()[8].schema(), other.aaChange);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.codon)) {
        this.codon = data().deepCopy(fields()[9].schema(), other.codon);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.functionalDescription)) {
        this.functionalDescription = data().deepCopy(fields()[10].schema(), other.functionalDescription);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.proteinSubstitutionScores)) {
        this.proteinSubstitutionScores = data().deepCopy(fields()[11].schema(), other.proteinSubstitutionScores);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.soTerms)) {
        this.soTerms = data().deepCopy(fields()[12].schema(), other.soTerms);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.expressionValues)) {
        this.expressionValues = data().deepCopy(fields()[13].schema(), other.expressionValues);
        fieldSetFlags()[13] = true;
      }
    }

    /** Gets the value of the 'geneName' field */
    public CharSequence getGeneName() {
      return geneName;
    }
    
    /** Sets the value of the 'geneName' field */
    public Builder setGeneName(CharSequence value) {
      validate(fields()[0], value);
      this.geneName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'geneName' field has been set */
    public boolean hasGeneName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'geneName' field */
    public Builder clearGeneName() {
      geneName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'ensemblGeneId' field */
    public CharSequence getEnsemblGeneId() {
      return ensemblGeneId;
    }
    
    /** Sets the value of the 'ensemblGeneId' field */
    public Builder setEnsemblGeneId(CharSequence value) {
      validate(fields()[1], value);
      this.ensemblGeneId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'ensemblGeneId' field has been set */
    public boolean hasEnsemblGeneId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'ensemblGeneId' field */
    public Builder clearEnsemblGeneId() {
      ensemblGeneId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'ensemblTranscriptId' field */
    public CharSequence getEnsemblTranscriptId() {
      return ensemblTranscriptId;
    }
    
    /** Sets the value of the 'ensemblTranscriptId' field */
    public Builder setEnsemblTranscriptId(CharSequence value) {
      validate(fields()[2], value);
      this.ensemblTranscriptId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'ensemblTranscriptId' field has been set */
    public boolean hasEnsemblTranscriptId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'ensemblTranscriptId' field */
    public Builder clearEnsemblTranscriptId() {
      ensemblTranscriptId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'strand' field */
    public CharSequence getStrand() {
      return strand;
    }
    
    /** Sets the value of the 'strand' field */
    public Builder setStrand(CharSequence value) {
      validate(fields()[3], value);
      this.strand = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'strand' field has been set */
    public boolean hasStrand() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'strand' field */
    public Builder clearStrand() {
      strand = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'biotype' field */
    public CharSequence getBiotype() {
      return biotype;
    }
    
    /** Sets the value of the 'biotype' field */
    public Builder setBiotype(CharSequence value) {
      validate(fields()[4], value);
      this.biotype = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'biotype' field has been set */
    public boolean hasBiotype() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'biotype' field */
    public Builder clearBiotype() {
      biotype = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'cDnaPosition' field */
    public Integer getCDnaPosition() {
      return cDnaPosition;
    }
    
    /** Sets the value of the 'cDnaPosition' field */
    public Builder setCDnaPosition(Integer value) {
      validate(fields()[5], value);
      this.cDnaPosition = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'cDnaPosition' field has been set */
    public boolean hasCDnaPosition() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'cDnaPosition' field */
    public Builder clearCDnaPosition() {
      cDnaPosition = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'cdsPosition' field */
    public Integer getCdsPosition() {
      return cdsPosition;
    }
    
    /** Sets the value of the 'cdsPosition' field */
    public Builder setCdsPosition(Integer value) {
      validate(fields()[6], value);
      this.cdsPosition = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'cdsPosition' field has been set */
    public boolean hasCdsPosition() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'cdsPosition' field */
    public Builder clearCdsPosition() {
      cdsPosition = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'aaPosition' field */
    public Integer getAaPosition() {
      return aaPosition;
    }
    
    /** Sets the value of the 'aaPosition' field */
    public Builder setAaPosition(Integer value) {
      validate(fields()[7], value);
      this.aaPosition = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'aaPosition' field has been set */
    public boolean hasAaPosition() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'aaPosition' field */
    public Builder clearAaPosition() {
      aaPosition = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'aaChange' field */
    public CharSequence getAaChange() {
      return aaChange;
    }
    
    /** Sets the value of the 'aaChange' field */
    public Builder setAaChange(CharSequence value) {
      validate(fields()[8], value);
      this.aaChange = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'aaChange' field has been set */
    public boolean hasAaChange() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'aaChange' field */
    public Builder clearAaChange() {
      aaChange = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'codon' field */
    public CharSequence getCodon() {
      return codon;
    }
    
    /** Sets the value of the 'codon' field */
    public Builder setCodon(CharSequence value) {
      validate(fields()[9], value);
      this.codon = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'codon' field has been set */
    public boolean hasCodon() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'codon' field */
    public Builder clearCodon() {
      codon = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'functionalDescription' field */
    public CharSequence getFunctionalDescription() {
      return functionalDescription;
    }
    
    /** Sets the value of the 'functionalDescription' field */
    public Builder setFunctionalDescription(CharSequence value) {
      validate(fields()[10], value);
      this.functionalDescription = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'functionalDescription' field has been set */
    public boolean hasFunctionalDescription() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'functionalDescription' field */
    public Builder clearFunctionalDescription() {
      functionalDescription = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'proteinSubstitutionScores' field */
    public java.util.List<Score> getProteinSubstitutionScores() {
      return proteinSubstitutionScores;
    }
    
    /** Sets the value of the 'proteinSubstitutionScores' field */
    public Builder setProteinSubstitutionScores(java.util.List<Score> value) {
      validate(fields()[11], value);
      this.proteinSubstitutionScores = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'proteinSubstitutionScores' field has been set */
    public boolean hasProteinSubstitutionScores() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'proteinSubstitutionScores' field */
    public Builder clearProteinSubstitutionScores() {
      proteinSubstitutionScores = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'soTerms' field */
    public java.util.List<ConsequenceTypeEntry> getSoTerms() {
      return soTerms;
    }
    
    /** Sets the value of the 'soTerms' field */
    public Builder setSoTerms(java.util.List<ConsequenceTypeEntry> value) {
      validate(fields()[12], value);
      this.soTerms = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'soTerms' field has been set */
    public boolean hasSoTerms() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'soTerms' field */
    public Builder clearSoTerms() {
      soTerms = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'expressionValues' field */
    public java.util.List<ExpressionValue> getExpressionValues() {
      return expressionValues;
    }
    
    /** Sets the value of the 'expressionValues' field */
    public Builder setExpressionValues(java.util.List<ExpressionValue> value) {
      validate(fields()[13], value);
      this.expressionValues = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'expressionValues' field has been set */
    public boolean hasExpressionValues() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'expressionValues' field */
    public Builder clearExpressionValues() {
      expressionValues = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    public ConsequenceType build() {
      try {
        ConsequenceType record = new ConsequenceType();
        record.geneName = fieldSetFlags()[0] ? this.geneName : (CharSequence) defaultValue(fields()[0]);
        record.ensemblGeneId = fieldSetFlags()[1] ? this.ensemblGeneId : (CharSequence) defaultValue(fields()[1]);
        record.ensemblTranscriptId = fieldSetFlags()[2] ? this.ensemblTranscriptId : (CharSequence) defaultValue(fields()[2]);
        record.strand = fieldSetFlags()[3] ? this.strand : (CharSequence) defaultValue(fields()[3]);
        record.biotype = fieldSetFlags()[4] ? this.biotype : (CharSequence) defaultValue(fields()[4]);
        record.cDnaPosition = fieldSetFlags()[5] ? this.cDnaPosition : (Integer) defaultValue(fields()[5]);
        record.cdsPosition = fieldSetFlags()[6] ? this.cdsPosition : (Integer) defaultValue(fields()[6]);
        record.aaPosition = fieldSetFlags()[7] ? this.aaPosition : (Integer) defaultValue(fields()[7]);
        record.aaChange = fieldSetFlags()[8] ? this.aaChange : (CharSequence) defaultValue(fields()[8]);
        record.codon = fieldSetFlags()[9] ? this.codon : (CharSequence) defaultValue(fields()[9]);
        record.functionalDescription = fieldSetFlags()[10] ? this.functionalDescription : (CharSequence) defaultValue(fields()[10]);
        record.proteinSubstitutionScores = fieldSetFlags()[11] ? this.proteinSubstitutionScores : (java.util.List<Score>) defaultValue(fields()[11]);
        record.soTerms = fieldSetFlags()[12] ? this.soTerms : (java.util.List<ConsequenceTypeEntry>) defaultValue(fields()[12]);
        record.expressionValues = fieldSetFlags()[13] ? this.expressionValues : (java.util.List<ExpressionValue>) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
