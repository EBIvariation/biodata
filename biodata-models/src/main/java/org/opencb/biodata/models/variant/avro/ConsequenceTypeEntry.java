/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ConsequenceTypeEntry extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ConsequenceTypeEntry\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"soName\",\"type\":[\"null\",\"string\"]},{\"name\":\"soAccession\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence soName;
  @Deprecated public java.lang.CharSequence soAccession;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ConsequenceTypeEntry() {}

  /**
   * All-args constructor.
   */
  public ConsequenceTypeEntry(java.lang.CharSequence soName, java.lang.CharSequence soAccession) {
    this.soName = soName;
    this.soAccession = soAccession;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return soName;
    case 1: return soAccession;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: soName = (java.lang.CharSequence)value$; break;
    case 1: soAccession = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'soName' field.
   */
  public java.lang.CharSequence getSoName() {
    return soName;
  }

  /**
   * Sets the value of the 'soName' field.
   * @param value the value to set.
   */
  public void setSoName(java.lang.CharSequence value) {
    this.soName = value;
  }

  /**
   * Gets the value of the 'soAccession' field.
   */
  public java.lang.CharSequence getSoAccession() {
    return soAccession;
  }

  /**
   * Sets the value of the 'soAccession' field.
   * @param value the value to set.
   */
  public void setSoAccession(java.lang.CharSequence value) {
    this.soAccession = value;
  }

  /** Creates a new ConsequenceTypeEntry RecordBuilder */
  public static org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.Builder newBuilder() {
    return new org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.Builder();
  }
  
  /** Creates a new ConsequenceTypeEntry RecordBuilder by copying an existing Builder */
  public static org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.Builder newBuilder(org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.Builder other) {
    return new org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.Builder(other);
  }
  
  /** Creates a new ConsequenceTypeEntry RecordBuilder by copying an existing ConsequenceTypeEntry instance */
  public static org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.Builder newBuilder(org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry other) {
    return new org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.Builder(other);
  }
  
  /**
   * RecordBuilder for ConsequenceTypeEntry instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ConsequenceTypeEntry>
    implements org.apache.avro.data.RecordBuilder<ConsequenceTypeEntry> {

    private java.lang.CharSequence soName;
    private java.lang.CharSequence soAccession;

    /** Creates a new Builder */
    private Builder() {
      super(org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.soName)) {
        this.soName = data().deepCopy(fields()[0].schema(), other.soName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.soAccession)) {
        this.soAccession = data().deepCopy(fields()[1].schema(), other.soAccession);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ConsequenceTypeEntry instance */
    private Builder(org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry other) {
            super(org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.SCHEMA$);
      if (isValidValue(fields()[0], other.soName)) {
        this.soName = data().deepCopy(fields()[0].schema(), other.soName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.soAccession)) {
        this.soAccession = data().deepCopy(fields()[1].schema(), other.soAccession);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'soName' field */
    public java.lang.CharSequence getSoName() {
      return soName;
    }
    
    /** Sets the value of the 'soName' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.Builder setSoName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.soName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'soName' field has been set */
    public boolean hasSoName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'soName' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.Builder clearSoName() {
      soName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'soAccession' field */
    public java.lang.CharSequence getSoAccession() {
      return soAccession;
    }
    
    /** Sets the value of the 'soAccession' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.Builder setSoAccession(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.soAccession = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'soAccession' field has been set */
    public boolean hasSoAccession() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'soAccession' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceTypeEntry.Builder clearSoAccession() {
      soAccession = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public ConsequenceTypeEntry build() {
      try {
        ConsequenceTypeEntry record = new ConsequenceTypeEntry();
        record.soName = fieldSetFlags()[0] ? this.soName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.soAccession = fieldSetFlags()[1] ? this.soAccession : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
