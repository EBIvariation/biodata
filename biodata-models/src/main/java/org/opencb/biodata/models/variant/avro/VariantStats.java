/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VariantStats extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VariantStats\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"refAllele\",\"type\":[\"null\",\"string\"]},{\"name\":\"altAllele\",\"type\":[\"null\",\"string\"]},{\"name\":\"refAlleleCount\",\"type\":[\"null\",\"int\"]},{\"name\":\"altAlleleCount\",\"type\":[\"null\",\"int\"]},{\"name\":\"missingAlleles\",\"type\":[\"null\",\"int\"]},{\"name\":\"missingGenotypes\",\"type\":[\"null\",\"int\"]},{\"name\":\"refAlleleFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"altAlleleFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"maf\",\"type\":[\"null\",\"float\"]},{\"name\":\"mgf\",\"type\":[\"null\",\"float\"]},{\"name\":\"mafAllele\",\"type\":[\"null\",\"string\"]},{\"name\":\"mgfGenotype\",\"type\":[\"null\",\"string\"]},{\"name\":\"passedFilters\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"mendelianErrors\",\"type\":[\"null\",\"int\"]},{\"name\":\"casesPercentDominant\",\"type\":[\"null\",\"float\"]},{\"name\":\"controlsPercentDominant\",\"type\":[\"null\",\"float\"]},{\"name\":\"casesPercentRecessive\",\"type\":[\"null\",\"float\"]},{\"name\":\"controlsPercentRecessive\",\"type\":[\"null\",\"float\"]},{\"name\":\"quality\",\"type\":[\"null\",\"float\"]},{\"name\":\"numSamples\",\"type\":[\"null\",\"int\"]},{\"name\":\"variantType\",\"type\":{\"type\":\"enum\",\"name\":\"VariantType\",\"symbols\":[\"SNP\",\"SNV\",\"MNP\",\"MNV\",\"INDEL\",\"SV\",\"CNV\"]}},{\"name\":\"hw\",\"type\":{\"type\":\"record\",\"name\":\"VariantHardyWeinbergStats\",\"fields\":[{\"name\":\"chi2\",\"type\":[\"null\",\"float\"]},{\"name\":\"pValue\",\"type\":[\"null\",\"float\"]},{\"name\":\"n\",\"type\":[\"null\",\"int\"]},{\"name\":\"n_AA_11\",\"type\":[\"null\",\"int\"]},{\"name\":\"n_Aa_10\",\"type\":[\"null\",\"int\"]},{\"name\":\"n_aa_00\",\"type\":[\"null\",\"int\"]},{\"name\":\"e_AA_11\",\"type\":[\"null\",\"float\"]},{\"name\":\"e_Aa_10\",\"type\":[\"null\",\"float\"]},{\"name\":\"e_aa_00\",\"type\":[\"null\",\"float\"]},{\"name\":\"p\",\"type\":[\"null\",\"float\"]},{\"name\":\"q\",\"type\":[\"null\",\"float\"]}]}},{\"name\":\"genotypesCount\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"Genotype\",\"fields\":[{\"name\":\"reference\",\"type\":\"string\"},{\"name\":\"alternate\",\"type\":\"string\"},{\"name\":\"allelesIdx\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"default\":[]},{\"name\":\"phased\",\"type\":\"boolean\"}]}}]},{\"name\":\"genotypesFreq\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"Genotype\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence refAllele;
  @Deprecated public CharSequence altAllele;
  @Deprecated public Integer refAlleleCount;
  @Deprecated public Integer altAlleleCount;
  @Deprecated public Integer missingAlleles;
  @Deprecated public Integer missingGenotypes;
  @Deprecated public Float refAlleleFreq;
  @Deprecated public Float altAlleleFreq;
  @Deprecated public Float maf;
  @Deprecated public Float mgf;
  @Deprecated public CharSequence mafAllele;
  @Deprecated public CharSequence mgfGenotype;
  @Deprecated public Boolean passedFilters;
  @Deprecated public Integer mendelianErrors;
  @Deprecated public Float casesPercentDominant;
  @Deprecated public Float controlsPercentDominant;
  @Deprecated public Float casesPercentRecessive;
  @Deprecated public Float controlsPercentRecessive;
  @Deprecated public Float quality;
  @Deprecated public Integer numSamples;
  @Deprecated public VariantType variantType;
  @Deprecated public VariantHardyWeinbergStats hw;
  @Deprecated public java.util.Map<CharSequence,Genotype> genotypesCount;
  @Deprecated public java.util.Map<CharSequence,Genotype> genotypesFreq;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public VariantStats() {}

  /**
   * All-args constructor.
   */
  public VariantStats(CharSequence refAllele, CharSequence altAllele, Integer refAlleleCount, Integer altAlleleCount, Integer missingAlleles, Integer missingGenotypes, Float refAlleleFreq, Float altAlleleFreq, Float maf, Float mgf, CharSequence mafAllele, CharSequence mgfGenotype, Boolean passedFilters, Integer mendelianErrors, Float casesPercentDominant, Float controlsPercentDominant, Float casesPercentRecessive, Float controlsPercentRecessive, Float quality, Integer numSamples, VariantType variantType, VariantHardyWeinbergStats hw, java.util.Map<CharSequence,Genotype> genotypesCount, java.util.Map<CharSequence,Genotype> genotypesFreq) {
    this.refAllele = refAllele;
    this.altAllele = altAllele;
    this.refAlleleCount = refAlleleCount;
    this.altAlleleCount = altAlleleCount;
    this.missingAlleles = missingAlleles;
    this.missingGenotypes = missingGenotypes;
    this.refAlleleFreq = refAlleleFreq;
    this.altAlleleFreq = altAlleleFreq;
    this.maf = maf;
    this.mgf = mgf;
    this.mafAllele = mafAllele;
    this.mgfGenotype = mgfGenotype;
    this.passedFilters = passedFilters;
    this.mendelianErrors = mendelianErrors;
    this.casesPercentDominant = casesPercentDominant;
    this.controlsPercentDominant = controlsPercentDominant;
    this.casesPercentRecessive = casesPercentRecessive;
    this.controlsPercentRecessive = controlsPercentRecessive;
    this.quality = quality;
    this.numSamples = numSamples;
    this.variantType = variantType;
    this.hw = hw;
    this.genotypesCount = genotypesCount;
    this.genotypesFreq = genotypesFreq;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return refAllele;
    case 1: return altAllele;
    case 2: return refAlleleCount;
    case 3: return altAlleleCount;
    case 4: return missingAlleles;
    case 5: return missingGenotypes;
    case 6: return refAlleleFreq;
    case 7: return altAlleleFreq;
    case 8: return maf;
    case 9: return mgf;
    case 10: return mafAllele;
    case 11: return mgfGenotype;
    case 12: return passedFilters;
    case 13: return mendelianErrors;
    case 14: return casesPercentDominant;
    case 15: return controlsPercentDominant;
    case 16: return casesPercentRecessive;
    case 17: return controlsPercentRecessive;
    case 18: return quality;
    case 19: return numSamples;
    case 20: return variantType;
    case 21: return hw;
    case 22: return genotypesCount;
    case 23: return genotypesFreq;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: refAllele = (CharSequence)value$; break;
    case 1: altAllele = (CharSequence)value$; break;
    case 2: refAlleleCount = (Integer)value$; break;
    case 3: altAlleleCount = (Integer)value$; break;
    case 4: missingAlleles = (Integer)value$; break;
    case 5: missingGenotypes = (Integer)value$; break;
    case 6: refAlleleFreq = (Float)value$; break;
    case 7: altAlleleFreq = (Float)value$; break;
    case 8: maf = (Float)value$; break;
    case 9: mgf = (Float)value$; break;
    case 10: mafAllele = (CharSequence)value$; break;
    case 11: mgfGenotype = (CharSequence)value$; break;
    case 12: passedFilters = (Boolean)value$; break;
    case 13: mendelianErrors = (Integer)value$; break;
    case 14: casesPercentDominant = (Float)value$; break;
    case 15: controlsPercentDominant = (Float)value$; break;
    case 16: casesPercentRecessive = (Float)value$; break;
    case 17: controlsPercentRecessive = (Float)value$; break;
    case 18: quality = (Float)value$; break;
    case 19: numSamples = (Integer)value$; break;
    case 20: variantType = (VariantType)value$; break;
    case 21: hw = (VariantHardyWeinbergStats)value$; break;
    case 22: genotypesCount = (java.util.Map<CharSequence,Genotype>)value$; break;
    case 23: genotypesFreq = (java.util.Map<CharSequence,Genotype>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'refAllele' field.
   */
  public CharSequence getRefAllele() {
    return refAllele;
  }

  /**
   * Sets the value of the 'refAllele' field.
   * @param value the value to set.
   */
  public void setRefAllele(CharSequence value) {
    this.refAllele = value;
  }

  /**
   * Gets the value of the 'altAllele' field.
   */
  public CharSequence getAltAllele() {
    return altAllele;
  }

  /**
   * Sets the value of the 'altAllele' field.
   * @param value the value to set.
   */
  public void setAltAllele(CharSequence value) {
    this.altAllele = value;
  }

  /**
   * Gets the value of the 'refAlleleCount' field.
   */
  public Integer getRefAlleleCount() {
    return refAlleleCount;
  }

  /**
   * Sets the value of the 'refAlleleCount' field.
   * @param value the value to set.
   */
  public void setRefAlleleCount(Integer value) {
    this.refAlleleCount = value;
  }

  /**
   * Gets the value of the 'altAlleleCount' field.
   */
  public Integer getAltAlleleCount() {
    return altAlleleCount;
  }

  /**
   * Sets the value of the 'altAlleleCount' field.
   * @param value the value to set.
   */
  public void setAltAlleleCount(Integer value) {
    this.altAlleleCount = value;
  }

  /**
   * Gets the value of the 'missingAlleles' field.
   */
  public Integer getMissingAlleles() {
    return missingAlleles;
  }

  /**
   * Sets the value of the 'missingAlleles' field.
   * @param value the value to set.
   */
  public void setMissingAlleles(Integer value) {
    this.missingAlleles = value;
  }

  /**
   * Gets the value of the 'missingGenotypes' field.
   */
  public Integer getMissingGenotypes() {
    return missingGenotypes;
  }

  /**
   * Sets the value of the 'missingGenotypes' field.
   * @param value the value to set.
   */
  public void setMissingGenotypes(Integer value) {
    this.missingGenotypes = value;
  }

  /**
   * Gets the value of the 'refAlleleFreq' field.
   */
  public Float getRefAlleleFreq() {
    return refAlleleFreq;
  }

  /**
   * Sets the value of the 'refAlleleFreq' field.
   * @param value the value to set.
   */
  public void setRefAlleleFreq(Float value) {
    this.refAlleleFreq = value;
  }

  /**
   * Gets the value of the 'altAlleleFreq' field.
   */
  public Float getAltAlleleFreq() {
    return altAlleleFreq;
  }

  /**
   * Sets the value of the 'altAlleleFreq' field.
   * @param value the value to set.
   */
  public void setAltAlleleFreq(Float value) {
    this.altAlleleFreq = value;
  }

  /**
   * Gets the value of the 'maf' field.
   */
  public Float getMaf() {
    return maf;
  }

  /**
   * Sets the value of the 'maf' field.
   * @param value the value to set.
   */
  public void setMaf(Float value) {
    this.maf = value;
  }

  /**
   * Gets the value of the 'mgf' field.
   */
  public Float getMgf() {
    return mgf;
  }

  /**
   * Sets the value of the 'mgf' field.
   * @param value the value to set.
   */
  public void setMgf(Float value) {
    this.mgf = value;
  }

  /**
   * Gets the value of the 'mafAllele' field.
   */
  public CharSequence getMafAllele() {
    return mafAllele;
  }

  /**
   * Sets the value of the 'mafAllele' field.
   * @param value the value to set.
   */
  public void setMafAllele(CharSequence value) {
    this.mafAllele = value;
  }

  /**
   * Gets the value of the 'mgfGenotype' field.
   */
  public CharSequence getMgfGenotype() {
    return mgfGenotype;
  }

  /**
   * Sets the value of the 'mgfGenotype' field.
   * @param value the value to set.
   */
  public void setMgfGenotype(CharSequence value) {
    this.mgfGenotype = value;
  }

  /**
   * Gets the value of the 'passedFilters' field.
   */
  public Boolean getPassedFilters() {
    return passedFilters;
  }

  /**
   * Sets the value of the 'passedFilters' field.
   * @param value the value to set.
   */
  public void setPassedFilters(Boolean value) {
    this.passedFilters = value;
  }

  /**
   * Gets the value of the 'mendelianErrors' field.
   */
  public Integer getMendelianErrors() {
    return mendelianErrors;
  }

  /**
   * Sets the value of the 'mendelianErrors' field.
   * @param value the value to set.
   */
  public void setMendelianErrors(Integer value) {
    this.mendelianErrors = value;
  }

  /**
   * Gets the value of the 'casesPercentDominant' field.
   */
  public Float getCasesPercentDominant() {
    return casesPercentDominant;
  }

  /**
   * Sets the value of the 'casesPercentDominant' field.
   * @param value the value to set.
   */
  public void setCasesPercentDominant(Float value) {
    this.casesPercentDominant = value;
  }

  /**
   * Gets the value of the 'controlsPercentDominant' field.
   */
  public Float getControlsPercentDominant() {
    return controlsPercentDominant;
  }

  /**
   * Sets the value of the 'controlsPercentDominant' field.
   * @param value the value to set.
   */
  public void setControlsPercentDominant(Float value) {
    this.controlsPercentDominant = value;
  }

  /**
   * Gets the value of the 'casesPercentRecessive' field.
   */
  public Float getCasesPercentRecessive() {
    return casesPercentRecessive;
  }

  /**
   * Sets the value of the 'casesPercentRecessive' field.
   * @param value the value to set.
   */
  public void setCasesPercentRecessive(Float value) {
    this.casesPercentRecessive = value;
  }

  /**
   * Gets the value of the 'controlsPercentRecessive' field.
   */
  public Float getControlsPercentRecessive() {
    return controlsPercentRecessive;
  }

  /**
   * Sets the value of the 'controlsPercentRecessive' field.
   * @param value the value to set.
   */
  public void setControlsPercentRecessive(Float value) {
    this.controlsPercentRecessive = value;
  }

  /**
   * Gets the value of the 'quality' field.
   */
  public Float getQuality() {
    return quality;
  }

  /**
   * Sets the value of the 'quality' field.
   * @param value the value to set.
   */
  public void setQuality(Float value) {
    this.quality = value;
  }

  /**
   * Gets the value of the 'numSamples' field.
   */
  public Integer getNumSamples() {
    return numSamples;
  }

  /**
   * Sets the value of the 'numSamples' field.
   * @param value the value to set.
   */
  public void setNumSamples(Integer value) {
    this.numSamples = value;
  }

  /**
   * Gets the value of the 'variantType' field.
   */
  public VariantType getVariantType() {
    return variantType;
  }

  /**
   * Sets the value of the 'variantType' field.
   * @param value the value to set.
   */
  public void setVariantType(VariantType value) {
    this.variantType = value;
  }

  /**
   * Gets the value of the 'hw' field.
   */
  public VariantHardyWeinbergStats getHw() {
    return hw;
  }

  /**
   * Sets the value of the 'hw' field.
   * @param value the value to set.
   */
  public void setHw(VariantHardyWeinbergStats value) {
    this.hw = value;
  }

  /**
   * Gets the value of the 'genotypesCount' field.
   */
  public java.util.Map<CharSequence,Genotype> getGenotypesCount() {
    return genotypesCount;
  }

  /**
   * Sets the value of the 'genotypesCount' field.
   * @param value the value to set.
   */
  public void setGenotypesCount(java.util.Map<CharSequence,Genotype> value) {
    this.genotypesCount = value;
  }

  /**
   * Gets the value of the 'genotypesFreq' field.
   */
  public java.util.Map<CharSequence,Genotype> getGenotypesFreq() {
    return genotypesFreq;
  }

  /**
   * Sets the value of the 'genotypesFreq' field.
   * @param value the value to set.
   */
  public void setGenotypesFreq(java.util.Map<CharSequence,Genotype> value) {
    this.genotypesFreq = value;
  }

  /** Creates a new VariantStats RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new VariantStats RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new VariantStats RecordBuilder by copying an existing VariantStats instance */
  public static Builder newBuilder(VariantStats other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for VariantStats instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VariantStats>
    implements org.apache.avro.data.RecordBuilder<VariantStats> {

    private CharSequence refAllele;
    private CharSequence altAllele;
    private Integer refAlleleCount;
    private Integer altAlleleCount;
    private Integer missingAlleles;
    private Integer missingGenotypes;
    private Float refAlleleFreq;
    private Float altAlleleFreq;
    private Float maf;
    private Float mgf;
    private CharSequence mafAllele;
    private CharSequence mgfGenotype;
    private Boolean passedFilters;
    private Integer mendelianErrors;
    private Float casesPercentDominant;
    private Float controlsPercentDominant;
    private Float casesPercentRecessive;
    private Float controlsPercentRecessive;
    private Float quality;
    private Integer numSamples;
    private VariantType variantType;
    private VariantHardyWeinbergStats hw;
    private java.util.Map<CharSequence,Genotype> genotypesCount;
    private java.util.Map<CharSequence,Genotype> genotypesFreq;

    /** Creates a new Builder */
    private Builder() {
      super(VariantStats.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.refAllele)) {
        this.refAllele = data().deepCopy(fields()[0].schema(), other.refAllele);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.altAllele)) {
        this.altAllele = data().deepCopy(fields()[1].schema(), other.altAllele);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.refAlleleCount)) {
        this.refAlleleCount = data().deepCopy(fields()[2].schema(), other.refAlleleCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.altAlleleCount)) {
        this.altAlleleCount = data().deepCopy(fields()[3].schema(), other.altAlleleCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.missingAlleles)) {
        this.missingAlleles = data().deepCopy(fields()[4].schema(), other.missingAlleles);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.missingGenotypes)) {
        this.missingGenotypes = data().deepCopy(fields()[5].schema(), other.missingGenotypes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.refAlleleFreq)) {
        this.refAlleleFreq = data().deepCopy(fields()[6].schema(), other.refAlleleFreq);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.altAlleleFreq)) {
        this.altAlleleFreq = data().deepCopy(fields()[7].schema(), other.altAlleleFreq);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.maf)) {
        this.maf = data().deepCopy(fields()[8].schema(), other.maf);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.mgf)) {
        this.mgf = data().deepCopy(fields()[9].schema(), other.mgf);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.mafAllele)) {
        this.mafAllele = data().deepCopy(fields()[10].schema(), other.mafAllele);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.mgfGenotype)) {
        this.mgfGenotype = data().deepCopy(fields()[11].schema(), other.mgfGenotype);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.passedFilters)) {
        this.passedFilters = data().deepCopy(fields()[12].schema(), other.passedFilters);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.mendelianErrors)) {
        this.mendelianErrors = data().deepCopy(fields()[13].schema(), other.mendelianErrors);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.casesPercentDominant)) {
        this.casesPercentDominant = data().deepCopy(fields()[14].schema(), other.casesPercentDominant);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.controlsPercentDominant)) {
        this.controlsPercentDominant = data().deepCopy(fields()[15].schema(), other.controlsPercentDominant);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.casesPercentRecessive)) {
        this.casesPercentRecessive = data().deepCopy(fields()[16].schema(), other.casesPercentRecessive);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.controlsPercentRecessive)) {
        this.controlsPercentRecessive = data().deepCopy(fields()[17].schema(), other.controlsPercentRecessive);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.quality)) {
        this.quality = data().deepCopy(fields()[18].schema(), other.quality);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.numSamples)) {
        this.numSamples = data().deepCopy(fields()[19].schema(), other.numSamples);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.variantType)) {
        this.variantType = data().deepCopy(fields()[20].schema(), other.variantType);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.hw)) {
        this.hw = data().deepCopy(fields()[21].schema(), other.hw);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.genotypesCount)) {
        this.genotypesCount = data().deepCopy(fields()[22].schema(), other.genotypesCount);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.genotypesFreq)) {
        this.genotypesFreq = data().deepCopy(fields()[23].schema(), other.genotypesFreq);
        fieldSetFlags()[23] = true;
      }
    }
    
    /** Creates a Builder by copying an existing VariantStats instance */
    private Builder(VariantStats other) {
            super(VariantStats.SCHEMA$);
      if (isValidValue(fields()[0], other.refAllele)) {
        this.refAllele = data().deepCopy(fields()[0].schema(), other.refAllele);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.altAllele)) {
        this.altAllele = data().deepCopy(fields()[1].schema(), other.altAllele);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.refAlleleCount)) {
        this.refAlleleCount = data().deepCopy(fields()[2].schema(), other.refAlleleCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.altAlleleCount)) {
        this.altAlleleCount = data().deepCopy(fields()[3].schema(), other.altAlleleCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.missingAlleles)) {
        this.missingAlleles = data().deepCopy(fields()[4].schema(), other.missingAlleles);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.missingGenotypes)) {
        this.missingGenotypes = data().deepCopy(fields()[5].schema(), other.missingGenotypes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.refAlleleFreq)) {
        this.refAlleleFreq = data().deepCopy(fields()[6].schema(), other.refAlleleFreq);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.altAlleleFreq)) {
        this.altAlleleFreq = data().deepCopy(fields()[7].schema(), other.altAlleleFreq);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.maf)) {
        this.maf = data().deepCopy(fields()[8].schema(), other.maf);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.mgf)) {
        this.mgf = data().deepCopy(fields()[9].schema(), other.mgf);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.mafAllele)) {
        this.mafAllele = data().deepCopy(fields()[10].schema(), other.mafAllele);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.mgfGenotype)) {
        this.mgfGenotype = data().deepCopy(fields()[11].schema(), other.mgfGenotype);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.passedFilters)) {
        this.passedFilters = data().deepCopy(fields()[12].schema(), other.passedFilters);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.mendelianErrors)) {
        this.mendelianErrors = data().deepCopy(fields()[13].schema(), other.mendelianErrors);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.casesPercentDominant)) {
        this.casesPercentDominant = data().deepCopy(fields()[14].schema(), other.casesPercentDominant);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.controlsPercentDominant)) {
        this.controlsPercentDominant = data().deepCopy(fields()[15].schema(), other.controlsPercentDominant);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.casesPercentRecessive)) {
        this.casesPercentRecessive = data().deepCopy(fields()[16].schema(), other.casesPercentRecessive);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.controlsPercentRecessive)) {
        this.controlsPercentRecessive = data().deepCopy(fields()[17].schema(), other.controlsPercentRecessive);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.quality)) {
        this.quality = data().deepCopy(fields()[18].schema(), other.quality);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.numSamples)) {
        this.numSamples = data().deepCopy(fields()[19].schema(), other.numSamples);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.variantType)) {
        this.variantType = data().deepCopy(fields()[20].schema(), other.variantType);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.hw)) {
        this.hw = data().deepCopy(fields()[21].schema(), other.hw);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.genotypesCount)) {
        this.genotypesCount = data().deepCopy(fields()[22].schema(), other.genotypesCount);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.genotypesFreq)) {
        this.genotypesFreq = data().deepCopy(fields()[23].schema(), other.genotypesFreq);
        fieldSetFlags()[23] = true;
      }
    }

    /** Gets the value of the 'refAllele' field */
    public CharSequence getRefAllele() {
      return refAllele;
    }
    
    /** Sets the value of the 'refAllele' field */
    public Builder setRefAllele(CharSequence value) {
      validate(fields()[0], value);
      this.refAllele = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'refAllele' field has been set */
    public boolean hasRefAllele() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'refAllele' field */
    public Builder clearRefAllele() {
      refAllele = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'altAllele' field */
    public CharSequence getAltAllele() {
      return altAllele;
    }
    
    /** Sets the value of the 'altAllele' field */
    public Builder setAltAllele(CharSequence value) {
      validate(fields()[1], value);
      this.altAllele = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'altAllele' field has been set */
    public boolean hasAltAllele() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'altAllele' field */
    public Builder clearAltAllele() {
      altAllele = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'refAlleleCount' field */
    public Integer getRefAlleleCount() {
      return refAlleleCount;
    }
    
    /** Sets the value of the 'refAlleleCount' field */
    public Builder setRefAlleleCount(Integer value) {
      validate(fields()[2], value);
      this.refAlleleCount = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'refAlleleCount' field has been set */
    public boolean hasRefAlleleCount() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'refAlleleCount' field */
    public Builder clearRefAlleleCount() {
      refAlleleCount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'altAlleleCount' field */
    public Integer getAltAlleleCount() {
      return altAlleleCount;
    }
    
    /** Sets the value of the 'altAlleleCount' field */
    public Builder setAltAlleleCount(Integer value) {
      validate(fields()[3], value);
      this.altAlleleCount = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'altAlleleCount' field has been set */
    public boolean hasAltAlleleCount() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'altAlleleCount' field */
    public Builder clearAltAlleleCount() {
      altAlleleCount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'missingAlleles' field */
    public Integer getMissingAlleles() {
      return missingAlleles;
    }
    
    /** Sets the value of the 'missingAlleles' field */
    public Builder setMissingAlleles(Integer value) {
      validate(fields()[4], value);
      this.missingAlleles = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'missingAlleles' field has been set */
    public boolean hasMissingAlleles() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'missingAlleles' field */
    public Builder clearMissingAlleles() {
      missingAlleles = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'missingGenotypes' field */
    public Integer getMissingGenotypes() {
      return missingGenotypes;
    }
    
    /** Sets the value of the 'missingGenotypes' field */
    public Builder setMissingGenotypes(Integer value) {
      validate(fields()[5], value);
      this.missingGenotypes = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'missingGenotypes' field has been set */
    public boolean hasMissingGenotypes() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'missingGenotypes' field */
    public Builder clearMissingGenotypes() {
      missingGenotypes = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'refAlleleFreq' field */
    public Float getRefAlleleFreq() {
      return refAlleleFreq;
    }
    
    /** Sets the value of the 'refAlleleFreq' field */
    public Builder setRefAlleleFreq(Float value) {
      validate(fields()[6], value);
      this.refAlleleFreq = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'refAlleleFreq' field has been set */
    public boolean hasRefAlleleFreq() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'refAlleleFreq' field */
    public Builder clearRefAlleleFreq() {
      refAlleleFreq = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'altAlleleFreq' field */
    public Float getAltAlleleFreq() {
      return altAlleleFreq;
    }
    
    /** Sets the value of the 'altAlleleFreq' field */
    public Builder setAltAlleleFreq(Float value) {
      validate(fields()[7], value);
      this.altAlleleFreq = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'altAlleleFreq' field has been set */
    public boolean hasAltAlleleFreq() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'altAlleleFreq' field */
    public Builder clearAltAlleleFreq() {
      altAlleleFreq = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'maf' field */
    public Float getMaf() {
      return maf;
    }
    
    /** Sets the value of the 'maf' field */
    public Builder setMaf(Float value) {
      validate(fields()[8], value);
      this.maf = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'maf' field has been set */
    public boolean hasMaf() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'maf' field */
    public Builder clearMaf() {
      maf = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'mgf' field */
    public Float getMgf() {
      return mgf;
    }
    
    /** Sets the value of the 'mgf' field */
    public Builder setMgf(Float value) {
      validate(fields()[9], value);
      this.mgf = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'mgf' field has been set */
    public boolean hasMgf() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'mgf' field */
    public Builder clearMgf() {
      mgf = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'mafAllele' field */
    public CharSequence getMafAllele() {
      return mafAllele;
    }
    
    /** Sets the value of the 'mafAllele' field */
    public Builder setMafAllele(CharSequence value) {
      validate(fields()[10], value);
      this.mafAllele = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'mafAllele' field has been set */
    public boolean hasMafAllele() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'mafAllele' field */
    public Builder clearMafAllele() {
      mafAllele = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'mgfGenotype' field */
    public CharSequence getMgfGenotype() {
      return mgfGenotype;
    }
    
    /** Sets the value of the 'mgfGenotype' field */
    public Builder setMgfGenotype(CharSequence value) {
      validate(fields()[11], value);
      this.mgfGenotype = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'mgfGenotype' field has been set */
    public boolean hasMgfGenotype() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'mgfGenotype' field */
    public Builder clearMgfGenotype() {
      mgfGenotype = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'passedFilters' field */
    public Boolean getPassedFilters() {
      return passedFilters;
    }
    
    /** Sets the value of the 'passedFilters' field */
    public Builder setPassedFilters(Boolean value) {
      validate(fields()[12], value);
      this.passedFilters = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'passedFilters' field has been set */
    public boolean hasPassedFilters() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'passedFilters' field */
    public Builder clearPassedFilters() {
      passedFilters = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'mendelianErrors' field */
    public Integer getMendelianErrors() {
      return mendelianErrors;
    }
    
    /** Sets the value of the 'mendelianErrors' field */
    public Builder setMendelianErrors(Integer value) {
      validate(fields()[13], value);
      this.mendelianErrors = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'mendelianErrors' field has been set */
    public boolean hasMendelianErrors() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'mendelianErrors' field */
    public Builder clearMendelianErrors() {
      mendelianErrors = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'casesPercentDominant' field */
    public Float getCasesPercentDominant() {
      return casesPercentDominant;
    }
    
    /** Sets the value of the 'casesPercentDominant' field */
    public Builder setCasesPercentDominant(Float value) {
      validate(fields()[14], value);
      this.casesPercentDominant = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'casesPercentDominant' field has been set */
    public boolean hasCasesPercentDominant() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'casesPercentDominant' field */
    public Builder clearCasesPercentDominant() {
      casesPercentDominant = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'controlsPercentDominant' field */
    public Float getControlsPercentDominant() {
      return controlsPercentDominant;
    }
    
    /** Sets the value of the 'controlsPercentDominant' field */
    public Builder setControlsPercentDominant(Float value) {
      validate(fields()[15], value);
      this.controlsPercentDominant = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'controlsPercentDominant' field has been set */
    public boolean hasControlsPercentDominant() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'controlsPercentDominant' field */
    public Builder clearControlsPercentDominant() {
      controlsPercentDominant = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'casesPercentRecessive' field */
    public Float getCasesPercentRecessive() {
      return casesPercentRecessive;
    }
    
    /** Sets the value of the 'casesPercentRecessive' field */
    public Builder setCasesPercentRecessive(Float value) {
      validate(fields()[16], value);
      this.casesPercentRecessive = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'casesPercentRecessive' field has been set */
    public boolean hasCasesPercentRecessive() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'casesPercentRecessive' field */
    public Builder clearCasesPercentRecessive() {
      casesPercentRecessive = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'controlsPercentRecessive' field */
    public Float getControlsPercentRecessive() {
      return controlsPercentRecessive;
    }
    
    /** Sets the value of the 'controlsPercentRecessive' field */
    public Builder setControlsPercentRecessive(Float value) {
      validate(fields()[17], value);
      this.controlsPercentRecessive = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'controlsPercentRecessive' field has been set */
    public boolean hasControlsPercentRecessive() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'controlsPercentRecessive' field */
    public Builder clearControlsPercentRecessive() {
      controlsPercentRecessive = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'quality' field */
    public Float getQuality() {
      return quality;
    }
    
    /** Sets the value of the 'quality' field */
    public Builder setQuality(Float value) {
      validate(fields()[18], value);
      this.quality = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'quality' field has been set */
    public boolean hasQuality() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'quality' field */
    public Builder clearQuality() {
      quality = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'numSamples' field */
    public Integer getNumSamples() {
      return numSamples;
    }
    
    /** Sets the value of the 'numSamples' field */
    public Builder setNumSamples(Integer value) {
      validate(fields()[19], value);
      this.numSamples = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'numSamples' field has been set */
    public boolean hasNumSamples() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'numSamples' field */
    public Builder clearNumSamples() {
      numSamples = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'variantType' field */
    public VariantType getVariantType() {
      return variantType;
    }
    
    /** Sets the value of the 'variantType' field */
    public Builder setVariantType(VariantType value) {
      validate(fields()[20], value);
      this.variantType = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'variantType' field has been set */
    public boolean hasVariantType() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'variantType' field */
    public Builder clearVariantType() {
      variantType = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'hw' field */
    public VariantHardyWeinbergStats getHw() {
      return hw;
    }
    
    /** Sets the value of the 'hw' field */
    public Builder setHw(VariantHardyWeinbergStats value) {
      validate(fields()[21], value);
      this.hw = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'hw' field has been set */
    public boolean hasHw() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'hw' field */
    public Builder clearHw() {
      hw = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /** Gets the value of the 'genotypesCount' field */
    public java.util.Map<CharSequence,Genotype> getGenotypesCount() {
      return genotypesCount;
    }
    
    /** Sets the value of the 'genotypesCount' field */
    public Builder setGenotypesCount(java.util.Map<CharSequence,Genotype> value) {
      validate(fields()[22], value);
      this.genotypesCount = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'genotypesCount' field has been set */
    public boolean hasGenotypesCount() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'genotypesCount' field */
    public Builder clearGenotypesCount() {
      genotypesCount = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /** Gets the value of the 'genotypesFreq' field */
    public java.util.Map<CharSequence,Genotype> getGenotypesFreq() {
      return genotypesFreq;
    }
    
    /** Sets the value of the 'genotypesFreq' field */
    public Builder setGenotypesFreq(java.util.Map<CharSequence,Genotype> value) {
      validate(fields()[23], value);
      this.genotypesFreq = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'genotypesFreq' field has been set */
    public boolean hasGenotypesFreq() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'genotypesFreq' field */
    public Builder clearGenotypesFreq() {
      genotypesFreq = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    @Override
    public VariantStats build() {
      try {
        VariantStats record = new VariantStats();
        record.refAllele = fieldSetFlags()[0] ? this.refAllele : (CharSequence) defaultValue(fields()[0]);
        record.altAllele = fieldSetFlags()[1] ? this.altAllele : (CharSequence) defaultValue(fields()[1]);
        record.refAlleleCount = fieldSetFlags()[2] ? this.refAlleleCount : (Integer) defaultValue(fields()[2]);
        record.altAlleleCount = fieldSetFlags()[3] ? this.altAlleleCount : (Integer) defaultValue(fields()[3]);
        record.missingAlleles = fieldSetFlags()[4] ? this.missingAlleles : (Integer) defaultValue(fields()[4]);
        record.missingGenotypes = fieldSetFlags()[5] ? this.missingGenotypes : (Integer) defaultValue(fields()[5]);
        record.refAlleleFreq = fieldSetFlags()[6] ? this.refAlleleFreq : (Float) defaultValue(fields()[6]);
        record.altAlleleFreq = fieldSetFlags()[7] ? this.altAlleleFreq : (Float) defaultValue(fields()[7]);
        record.maf = fieldSetFlags()[8] ? this.maf : (Float) defaultValue(fields()[8]);
        record.mgf = fieldSetFlags()[9] ? this.mgf : (Float) defaultValue(fields()[9]);
        record.mafAllele = fieldSetFlags()[10] ? this.mafAllele : (CharSequence) defaultValue(fields()[10]);
        record.mgfGenotype = fieldSetFlags()[11] ? this.mgfGenotype : (CharSequence) defaultValue(fields()[11]);
        record.passedFilters = fieldSetFlags()[12] ? this.passedFilters : (Boolean) defaultValue(fields()[12]);
        record.mendelianErrors = fieldSetFlags()[13] ? this.mendelianErrors : (Integer) defaultValue(fields()[13]);
        record.casesPercentDominant = fieldSetFlags()[14] ? this.casesPercentDominant : (Float) defaultValue(fields()[14]);
        record.controlsPercentDominant = fieldSetFlags()[15] ? this.controlsPercentDominant : (Float) defaultValue(fields()[15]);
        record.casesPercentRecessive = fieldSetFlags()[16] ? this.casesPercentRecessive : (Float) defaultValue(fields()[16]);
        record.controlsPercentRecessive = fieldSetFlags()[17] ? this.controlsPercentRecessive : (Float) defaultValue(fields()[17]);
        record.quality = fieldSetFlags()[18] ? this.quality : (Float) defaultValue(fields()[18]);
        record.numSamples = fieldSetFlags()[19] ? this.numSamples : (Integer) defaultValue(fields()[19]);
        record.variantType = fieldSetFlags()[20] ? this.variantType : (VariantType) defaultValue(fields()[20]);
        record.hw = fieldSetFlags()[21] ? this.hw : (VariantHardyWeinbergStats) defaultValue(fields()[21]);
        record.genotypesCount = fieldSetFlags()[22] ? this.genotypesCount : (java.util.Map<CharSequence,Genotype>) defaultValue(fields()[22]);
        record.genotypesFreq = fieldSetFlags()[23] ? this.genotypesFreq : (java.util.Map<CharSequence,Genotype>) defaultValue(fields()[23]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
